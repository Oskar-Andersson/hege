
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.43.1' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var page = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    	module.exports = factory() ;
    }(commonjsGlobal, (function () {
    var isarray = Array.isArray || function (arr) {
      return Object.prototype.toString.call(arr) == '[object Array]';
    };

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1 = pathToRegexp;
    var parse_1 = parse;
    var compile_1 = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1 = tokensToRegExp;

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp([
      // Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      '(\\\\.)',
      // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
      // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
      // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
      '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {String} str
     * @return {Array}
     */
    function parse (str) {
      var tokens = [];
      var key = 0;
      var index = 0;
      var path = '';
      var res;

      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;

        // Ignore already escaped sequences.
        if (escaped) {
          path += escaped[1];
          continue
        }

        // Push the current path onto the tokens.
        if (path) {
          tokens.push(path);
          path = '';
        }

        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var suffix = res[6];
        var asterisk = res[7];

        var repeat = suffix === '+' || suffix === '*';
        var optional = suffix === '?' || suffix === '*';
        var delimiter = prefix || '/';
        var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?');

        tokens.push({
          name: name || key++,
          prefix: prefix || '',
          delimiter: delimiter,
          optional: optional,
          repeat: repeat,
          pattern: escapeGroup(pattern)
        });
      }

      // Match any characters still remaining.
      if (index < str.length) {
        path += str.substr(index);
      }

      // If the path exists, push it onto the end.
      if (path) {
        tokens.push(path);
      }

      return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {String}   str
     * @return {Function}
     */
    function compile (str) {
      return tokensToFunction(parse(str))
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction (tokens) {
      // Compile all the tokens into regexps.
      var matches = new Array(tokens.length);

      // Compile all the patterns before compilation.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
          matches[i] = new RegExp('^' + tokens[i].pattern + '$');
        }
      }

      return function (obj) {
        var path = '';
        var data = obj || {};

        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            path += token;

            continue
          }

          var value = data[token.name];
          var segment;

          if (value == null) {
            if (token.optional) {
              continue
            } else {
              throw new TypeError('Expected "' + token.name + '" to be defined')
            }
          }

          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but received "' + value + '"')
            }

            if (value.length === 0) {
              if (token.optional) {
                continue
              } else {
                throw new TypeError('Expected "' + token.name + '" to not be empty')
              }
            }

            for (var j = 0; j < value.length; j++) {
              segment = encodeURIComponent(value[j]);

              if (!matches[i].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue
          }

          segment = encodeURIComponent(value);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
          }

          path += token.prefix + segment;
        }

        return path
      }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {String} str
     * @return {String}
     */
    function escapeString (str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {String} group
     * @return {String}
     */
    function escapeGroup (group) {
      return group.replace(/([=!:$\/()])/g, '\\$1')
    }

    /**
     * Attach the keys as a property of the regexp.
     *
     * @param  {RegExp} re
     * @param  {Array}  keys
     * @return {RegExp}
     */
    function attachKeys (re, keys) {
      re.keys = keys;
      return re
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {String}
     */
    function flags (options) {
      return options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {RegExp} path
     * @param  {Array}  keys
     * @return {RegExp}
     */
    function regexpToRegexp (path, keys) {
      // Use a negative lookahead to match only capturing groups.
      var groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            pattern: null
          });
        }
      }

      return attachKeys(path, keys)
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {Array}  path
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function arrayToRegexp (path, keys, options) {
      var parts = [];

      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
      }

      var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

      return attachKeys(regexp, keys)
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {String} path
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function stringToRegexp (path, keys, options) {
      var tokens = parse(path);
      var re = tokensToRegExp(tokens, options);

      // Attach keys back to the regexp.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] !== 'string') {
          keys.push(tokens[i]);
        }
      }

      return attachKeys(re, keys)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {Array}  tokens
     * @param  {Array}  keys
     * @param  {Object} options
     * @return {RegExp}
     */
    function tokensToRegExp (tokens, options) {
      options = options || {};

      var strict = options.strict;
      var end = options.end !== false;
      var route = '';
      var lastToken = tokens[tokens.length - 1];
      var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken);

      // Iterate over the tokens and create our regexp string.
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString(token);
        } else {
          var prefix = escapeString(token.prefix);
          var capture = token.pattern;

          if (token.repeat) {
            capture += '(?:' + prefix + capture + ')*';
          }

          if (token.optional) {
            if (prefix) {
              capture = '(?:' + prefix + '(' + capture + '))?';
            } else {
              capture = '(' + capture + ')?';
            }
          } else {
            capture = prefix + '(' + capture + ')';
          }

          route += capture;
        }
      }

      // In non-strict mode we allow a slash at the end of match. If the path to
      // match already ends with a slash, we remove it for consistency. The slash
      // is valid at the end of a path match, not in the middle. This is important
      // in non-ending mode, where "/test/" shouldn't match "/test//route".
      if (!strict) {
        route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?';
      }

      if (end) {
        route += '$';
      } else {
        // In non-ending mode, we need the capturing groups to match as much as
        // possible by using a positive lookahead to the end or next path segment.
        route += strict && endsWithSlash ? '' : '(?=\\/|$)';
      }

      return new RegExp('^' + route, flags(options))
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(String|RegExp|Array)} path
     * @param  {Array}                 [keys]
     * @param  {Object}                [options]
     * @return {RegExp}
     */
    function pathToRegexp (path, keys, options) {
      keys = keys || [];

      if (!isarray(keys)) {
        options = keys;
        keys = [];
      } else if (!options) {
        options = {};
      }

      if (path instanceof RegExp) {
        return regexpToRegexp(path, keys)
      }

      if (isarray(path)) {
        return arrayToRegexp(path, keys, options)
      }

      return stringToRegexp(path, keys, options)
    }

    pathToRegexp_1.parse = parse_1;
    pathToRegexp_1.compile = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

    /**
       * Module dependencies.
       */

      

      /**
       * Short-cuts for global-object checks
       */

      var hasDocument = ('undefined' !== typeof document);
      var hasWindow = ('undefined' !== typeof window);
      var hasHistory = ('undefined' !== typeof history);
      var hasProcess = typeof {"env":{"isProd":false}} !== 'undefined';

      /**
       * Detect click event
       */
      var clickEvent = hasDocument && document.ontouchstart ? 'touchstart' : 'click';

      /**
       * To work properly with the URL
       * history.location generated polyfill in https://github.com/devote/HTML5-History-API
       */

      var isLocation = hasWindow && !!(window.history.location || window.location);

      /**
       * The page instance
       * @api private
       */
      function Page() {
        // public things
        this.callbacks = [];
        this.exits = [];
        this.current = '';
        this.len = 0;

        // private things
        this._decodeURLComponents = true;
        this._base = '';
        this._strict = false;
        this._running = false;
        this._hashbang = false;

        // bound functions
        this.clickHandler = this.clickHandler.bind(this);
        this._onpopstate = this._onpopstate.bind(this);
      }

      /**
       * Configure the instance of page. This can be called multiple times.
       *
       * @param {Object} options
       * @api public
       */

      Page.prototype.configure = function(options) {
        var opts = options || {};

        this._window = opts.window || (hasWindow && window);
        this._decodeURLComponents = opts.decodeURLComponents !== false;
        this._popstate = opts.popstate !== false && hasWindow;
        this._click = opts.click !== false && hasDocument;
        this._hashbang = !!opts.hashbang;

        var _window = this._window;
        if(this._popstate) {
          _window.addEventListener('popstate', this._onpopstate, false);
        } else if(hasWindow) {
          _window.removeEventListener('popstate', this._onpopstate, false);
        }

        if (this._click) {
          _window.document.addEventListener(clickEvent, this.clickHandler, false);
        } else if(hasDocument) {
          _window.document.removeEventListener(clickEvent, this.clickHandler, false);
        }

        if(this._hashbang && hasWindow && !hasHistory) {
          _window.addEventListener('hashchange', this._onpopstate, false);
        } else if(hasWindow) {
          _window.removeEventListener('hashchange', this._onpopstate, false);
        }
      };

      /**
       * Get or set basepath to `path`.
       *
       * @param {string} path
       * @api public
       */

      Page.prototype.base = function(path) {
        if (0 === arguments.length) return this._base;
        this._base = path;
      };

      /**
       * Gets the `base`, which depends on whether we are using History or
       * hashbang routing.

       * @api private
       */
      Page.prototype._getBase = function() {
        var base = this._base;
        if(!!base) return base;
        var loc = hasWindow && this._window && this._window.location;

        if(hasWindow && this._hashbang && loc && loc.protocol === 'file:') {
          base = loc.pathname;
        }

        return base;
      };

      /**
       * Get or set strict path matching to `enable`
       *
       * @param {boolean} enable
       * @api public
       */

      Page.prototype.strict = function(enable) {
        if (0 === arguments.length) return this._strict;
        this._strict = enable;
      };


      /**
       * Bind with the given `options`.
       *
       * Options:
       *
       *    - `click` bind to click events [true]
       *    - `popstate` bind to popstate [true]
       *    - `dispatch` perform initial dispatch [true]
       *
       * @param {Object} options
       * @api public
       */

      Page.prototype.start = function(options) {
        var opts = options || {};
        this.configure(opts);

        if (false === opts.dispatch) return;
        this._running = true;

        var url;
        if(isLocation) {
          var window = this._window;
          var loc = window.location;

          if(this._hashbang && ~loc.hash.indexOf('#!')) {
            url = loc.hash.substr(2) + loc.search;
          } else if (this._hashbang) {
            url = loc.search + loc.hash;
          } else {
            url = loc.pathname + loc.search + loc.hash;
          }
        }

        this.replace(url, null, true, opts.dispatch);
      };

      /**
       * Unbind click and popstate event handlers.
       *
       * @api public
       */

      Page.prototype.stop = function() {
        if (!this._running) return;
        this.current = '';
        this.len = 0;
        this._running = false;

        var window = this._window;
        this._click && window.document.removeEventListener(clickEvent, this.clickHandler, false);
        hasWindow && window.removeEventListener('popstate', this._onpopstate, false);
        hasWindow && window.removeEventListener('hashchange', this._onpopstate, false);
      };

      /**
       * Show `path` with optional `state` object.
       *
       * @param {string} path
       * @param {Object=} state
       * @param {boolean=} dispatch
       * @param {boolean=} push
       * @return {!Context}
       * @api public
       */

      Page.prototype.show = function(path, state, dispatch, push) {
        var ctx = new Context(path, state, this),
          prev = this.prevContext;
        this.prevContext = ctx;
        this.current = ctx.path;
        if (false !== dispatch) this.dispatch(ctx, prev);
        if (false !== ctx.handled && false !== push) ctx.pushState();
        return ctx;
      };

      /**
       * Goes back in the history
       * Back should always let the current route push state and then go back.
       *
       * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base
       * @param {Object=} state
       * @api public
       */

      Page.prototype.back = function(path, state) {
        var page = this;
        if (this.len > 0) {
          var window = this._window;
          // this may need more testing to see if all browsers
          // wait for the next tick to go back in history
          hasHistory && window.history.back();
          this.len--;
        } else if (path) {
          setTimeout(function() {
            page.show(path, state);
          });
        } else {
          setTimeout(function() {
            page.show(page._getBase(), state);
          });
        }
      };

      /**
       * Register route to redirect from one path to other
       * or just redirect to another route
       *
       * @param {string} from - if param 'to' is undefined redirects to 'from'
       * @param {string=} to
       * @api public
       */
      Page.prototype.redirect = function(from, to) {
        var inst = this;

        // Define route from a path to another
        if ('string' === typeof from && 'string' === typeof to) {
          page.call(this, from, function(e) {
            setTimeout(function() {
              inst.replace(/** @type {!string} */ (to));
            }, 0);
          });
        }

        // Wait for the push state and replace it with another
        if ('string' === typeof from && 'undefined' === typeof to) {
          setTimeout(function() {
            inst.replace(from);
          }, 0);
        }
      };

      /**
       * Replace `path` with optional `state` object.
       *
       * @param {string} path
       * @param {Object=} state
       * @param {boolean=} init
       * @param {boolean=} dispatch
       * @return {!Context}
       * @api public
       */


      Page.prototype.replace = function(path, state, init, dispatch) {
        var ctx = new Context(path, state, this),
          prev = this.prevContext;
        this.prevContext = ctx;
        this.current = ctx.path;
        ctx.init = init;
        ctx.save(); // save before dispatching, which may redirect
        if (false !== dispatch) this.dispatch(ctx, prev);
        return ctx;
      };

      /**
       * Dispatch the given `ctx`.
       *
       * @param {Context} ctx
       * @api private
       */

      Page.prototype.dispatch = function(ctx, prev) {
        var i = 0, j = 0, page = this;

        function nextExit() {
          var fn = page.exits[j++];
          if (!fn) return nextEnter();
          fn(prev, nextExit);
        }

        function nextEnter() {
          var fn = page.callbacks[i++];

          if (ctx.path !== page.current) {
            ctx.handled = false;
            return;
          }
          if (!fn) return unhandled.call(page, ctx);
          fn(ctx, nextEnter);
        }

        if (prev) {
          nextExit();
        } else {
          nextEnter();
        }
      };

      /**
       * Register an exit route on `path` with
       * callback `fn()`, which will be called
       * on the previous context when a new
       * page is visited.
       */
      Page.prototype.exit = function(path, fn) {
        if (typeof path === 'function') {
          return this.exit('*', path);
        }

        var route = new Route(path, null, this);
        for (var i = 1; i < arguments.length; ++i) {
          this.exits.push(route.middleware(arguments[i]));
        }
      };

      /**
       * Handle "click" events.
       */

      /* jshint +W054 */
      Page.prototype.clickHandler = function(e) {
        if (1 !== this._which(e)) return;

        if (e.metaKey || e.ctrlKey || e.shiftKey) return;
        if (e.defaultPrevented) return;

        // ensure link
        // use shadow dom when available if not, fall back to composedPath()
        // for browsers that only have shady
        var el = e.target;
        var eventPath = e.path || (e.composedPath ? e.composedPath() : null);

        if(eventPath) {
          for (var i = 0; i < eventPath.length; i++) {
            if (!eventPath[i].nodeName) continue;
            if (eventPath[i].nodeName.toUpperCase() !== 'A') continue;
            if (!eventPath[i].href) continue;

            el = eventPath[i];
            break;
          }
        }

        // continue ensure link
        // el.nodeName for svg links are 'a' instead of 'A'
        while (el && 'A' !== el.nodeName.toUpperCase()) el = el.parentNode;
        if (!el || 'A' !== el.nodeName.toUpperCase()) return;

        // check if link is inside an svg
        // in this case, both href and target are always inside an object
        var svg = (typeof el.href === 'object') && el.href.constructor.name === 'SVGAnimatedString';

        // Ignore if tag has
        // 1. "download" attribute
        // 2. rel="external" attribute
        if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;

        // ensure non-hash for the same path
        var link = el.getAttribute('href');
        if(!this._hashbang && this._samePath(el) && (el.hash || '#' === link)) return;

        // Check for mailto: in the href
        if (link && link.indexOf('mailto:') > -1) return;

        // check target
        // svg target is an object and its desired value is in .baseVal property
        if (svg ? el.target.baseVal : el.target) return;

        // x-origin
        // note: svg links that are not relative don't call click events (and skip page.js)
        // consequently, all svg links tested inside page.js are relative and in the same origin
        if (!svg && !this.sameOrigin(el.href)) return;

        // rebuild path
        // There aren't .pathname and .search properties in svg links, so we use href
        // Also, svg href is an object and its desired value is in .baseVal property
        var path = svg ? el.href.baseVal : (el.pathname + el.search + (el.hash || ''));

        path = path[0] !== '/' ? '/' + path : path;

        // strip leading "/[drive letter]:" on NW.js on Windows
        if (hasProcess && path.match(/^\/[a-zA-Z]:\//)) {
          path = path.replace(/^\/[a-zA-Z]:\//, '/');
        }

        // same page
        var orig = path;
        var pageBase = this._getBase();

        if (path.indexOf(pageBase) === 0) {
          path = path.substr(pageBase.length);
        }

        if (this._hashbang) path = path.replace('#!', '');

        if (pageBase && orig === path && (!isLocation || this._window.location.protocol !== 'file:')) {
          return;
        }

        e.preventDefault();
        this.show(orig);
      };

      /**
       * Handle "populate" events.
       * @api private
       */

      Page.prototype._onpopstate = (function () {
        var loaded = false;
        if ( ! hasWindow ) {
          return function () {};
        }
        if (hasDocument && document.readyState === 'complete') {
          loaded = true;
        } else {
          window.addEventListener('load', function() {
            setTimeout(function() {
              loaded = true;
            }, 0);
          });
        }
        return function onpopstate(e) {
          if (!loaded) return;
          var page = this;
          if (e.state) {
            var path = e.state.path;
            page.replace(path, e.state);
          } else if (isLocation) {
            var loc = page._window.location;
            page.show(loc.pathname + loc.search + loc.hash, undefined, undefined, false);
          }
        };
      })();

      /**
       * Event button.
       */
      Page.prototype._which = function(e) {
        e = e || (hasWindow && this._window.event);
        return null == e.which ? e.button : e.which;
      };

      /**
       * Convert to a URL object
       * @api private
       */
      Page.prototype._toURL = function(href) {
        var window = this._window;
        if(typeof URL === 'function' && isLocation) {
          return new URL(href, window.location.toString());
        } else if (hasDocument) {
          var anc = window.document.createElement('a');
          anc.href = href;
          return anc;
        }
      };

      /**
       * Check if `href` is the same origin.
       * @param {string} href
       * @api public
       */
      Page.prototype.sameOrigin = function(href) {
        if(!href || !isLocation) return false;

        var url = this._toURL(href);
        var window = this._window;

        var loc = window.location;

        /*
           When the port is the default http port 80 for http, or 443 for
           https, internet explorer 11 returns an empty string for loc.port,
           so we need to compare loc.port with an empty string if url.port
           is the default port 80 or 443.
           Also the comparition with `port` is changed from `===` to `==` because
           `port` can be a string sometimes. This only applies to ie11.
        */
        return loc.protocol === url.protocol &&
          loc.hostname === url.hostname &&
          (loc.port === url.port || loc.port === '' && (url.port == 80 || url.port == 443)); // jshint ignore:line
      };

      /**
       * @api private
       */
      Page.prototype._samePath = function(url) {
        if(!isLocation) return false;
        var window = this._window;
        var loc = window.location;
        return url.pathname === loc.pathname &&
          url.search === loc.search;
      };

      /**
       * Remove URL encoding from the given `str`.
       * Accommodates whitespace in both x-www-form-urlencoded
       * and regular percent-encoded form.
       *
       * @param {string} val - URL component to decode
       * @api private
       */
      Page.prototype._decodeURLEncodedURIComponent = function(val) {
        if (typeof val !== 'string') { return val; }
        return this._decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
      };

      /**
       * Create a new `page` instance and function
       */
      function createPage() {
        var pageInstance = new Page();

        function pageFn(/* args */) {
          return page.apply(pageInstance, arguments);
        }

        // Copy all of the things over. In 2.0 maybe we use setPrototypeOf
        pageFn.callbacks = pageInstance.callbacks;
        pageFn.exits = pageInstance.exits;
        pageFn.base = pageInstance.base.bind(pageInstance);
        pageFn.strict = pageInstance.strict.bind(pageInstance);
        pageFn.start = pageInstance.start.bind(pageInstance);
        pageFn.stop = pageInstance.stop.bind(pageInstance);
        pageFn.show = pageInstance.show.bind(pageInstance);
        pageFn.back = pageInstance.back.bind(pageInstance);
        pageFn.redirect = pageInstance.redirect.bind(pageInstance);
        pageFn.replace = pageInstance.replace.bind(pageInstance);
        pageFn.dispatch = pageInstance.dispatch.bind(pageInstance);
        pageFn.exit = pageInstance.exit.bind(pageInstance);
        pageFn.configure = pageInstance.configure.bind(pageInstance);
        pageFn.sameOrigin = pageInstance.sameOrigin.bind(pageInstance);
        pageFn.clickHandler = pageInstance.clickHandler.bind(pageInstance);

        pageFn.create = createPage;

        Object.defineProperty(pageFn, 'len', {
          get: function(){
            return pageInstance.len;
          },
          set: function(val) {
            pageInstance.len = val;
          }
        });

        Object.defineProperty(pageFn, 'current', {
          get: function(){
            return pageInstance.current;
          },
          set: function(val) {
            pageInstance.current = val;
          }
        });

        // In 2.0 these can be named exports
        pageFn.Context = Context;
        pageFn.Route = Route;

        return pageFn;
      }

      /**
       * Register `path` with callback `fn()`,
       * or route `path`, or redirection,
       * or `page.start()`.
       *
       *   page(fn);
       *   page('*', fn);
       *   page('/user/:id', load, user);
       *   page('/user/' + user.id, { some: 'thing' });
       *   page('/user/' + user.id);
       *   page('/from', '/to')
       *   page();
       *
       * @param {string|!Function|!Object} path
       * @param {Function=} fn
       * @api public
       */

      function page(path, fn) {
        // <callback>
        if ('function' === typeof path) {
          return page.call(this, '*', path);
        }

        // route <path> to <callback ...>
        if ('function' === typeof fn) {
          var route = new Route(/** @type {string} */ (path), null, this);
          for (var i = 1; i < arguments.length; ++i) {
            this.callbacks.push(route.middleware(arguments[i]));
          }
          // show <path> with [state]
        } else if ('string' === typeof path) {
          this['string' === typeof fn ? 'redirect' : 'show'](path, fn);
          // start [options]
        } else {
          this.start(path);
        }
      }

      /**
       * Unhandled `ctx`. When it's not the initial
       * popstate then redirect. If you wish to handle
       * 404s on your own use `page('*', callback)`.
       *
       * @param {Context} ctx
       * @api private
       */
      function unhandled(ctx) {
        if (ctx.handled) return;
        var current;
        var page = this;
        var window = page._window;

        if (page._hashbang) {
          current = isLocation && this._getBase() + window.location.hash.replace('#!', '');
        } else {
          current = isLocation && window.location.pathname + window.location.search;
        }

        if (current === ctx.canonicalPath) return;
        page.stop();
        ctx.handled = false;
        isLocation && (window.location.href = ctx.canonicalPath);
      }

      /**
       * Escapes RegExp characters in the given string.
       *
       * @param {string} s
       * @api private
       */
      function escapeRegExp(s) {
        return s.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
      }

      /**
       * Initialize a new "request" `Context`
       * with the given `path` and optional initial `state`.
       *
       * @constructor
       * @param {string} path
       * @param {Object=} state
       * @api public
       */

      function Context(path, state, pageInstance) {
        var _page = this.page = pageInstance || page;
        var window = _page._window;
        var hashbang = _page._hashbang;

        var pageBase = _page._getBase();
        if ('/' === path[0] && 0 !== path.indexOf(pageBase)) path = pageBase + (hashbang ? '#!' : '') + path;
        var i = path.indexOf('?');

        this.canonicalPath = path;
        var re = new RegExp('^' + escapeRegExp(pageBase));
        this.path = path.replace(re, '') || '/';
        if (hashbang) this.path = this.path.replace('#!', '') || '/';

        this.title = (hasDocument && window.document.title);
        this.state = state || {};
        this.state.path = path;
        this.querystring = ~i ? _page._decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
        this.pathname = _page._decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
        this.params = {};

        // fragment
        this.hash = '';
        if (!hashbang) {
          if (!~this.path.indexOf('#')) return;
          var parts = this.path.split('#');
          this.path = this.pathname = parts[0];
          this.hash = _page._decodeURLEncodedURIComponent(parts[1]) || '';
          this.querystring = this.querystring.split('#')[0];
        }
      }

      /**
       * Push state.
       *
       * @api private
       */

      Context.prototype.pushState = function() {
        var page = this.page;
        var window = page._window;
        var hashbang = page._hashbang;

        page.len++;
        if (hasHistory) {
            window.history.pushState(this.state, this.title,
              hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
        }
      };

      /**
       * Save the context state.
       *
       * @api public
       */

      Context.prototype.save = function() {
        var page = this.page;
        if (hasHistory) {
            page._window.history.replaceState(this.state, this.title,
              page._hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
        }
      };

      /**
       * Initialize `Route` with the given HTTP `path`,
       * and an array of `callbacks` and `options`.
       *
       * Options:
       *
       *   - `sensitive`    enable case-sensitive routes
       *   - `strict`       enable strict matching for trailing slashes
       *
       * @constructor
       * @param {string} path
       * @param {Object=} options
       * @api private
       */

      function Route(path, options, page) {
        var _page = this.page = page || globalPage;
        var opts = options || {};
        opts.strict = opts.strict || _page._strict;
        this.path = (path === '*') ? '(.*)' : path;
        this.method = 'GET';
        this.regexp = pathToRegexp_1(this.path, this.keys = [], opts);
      }

      /**
       * Return route middleware with
       * the given callback `fn()`.
       *
       * @param {Function} fn
       * @return {Function}
       * @api public
       */

      Route.prototype.middleware = function(fn) {
        var self = this;
        return function(ctx, next) {
          if (self.match(ctx.path, ctx.params)) {
            ctx.routePath = self.path;
            return fn(ctx, next);
          }
          next();
        };
      };

      /**
       * Check if this route matches `path`, if so
       * populate `params`.
       *
       * @param {string} path
       * @param {Object} params
       * @return {boolean}
       * @api private
       */

      Route.prototype.match = function(path, params) {
        var keys = this.keys,
          qsIndex = path.indexOf('?'),
          pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
          m = this.regexp.exec(decodeURIComponent(pathname));

        if (!m) return false;

        delete params[0];

        for (var i = 1, len = m.length; i < len; ++i) {
          var key = keys[i - 1];
          var val = this.page._decodeURLEncodedURIComponent(m[i]);
          if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
            params[key.name] = val;
          }
        }

        return true;
      };


      /**
       * Module exports.
       */

      var globalPage = createPage();
      var page_js = globalPage;
      var default_1 = globalPage;

    page_js.default = default_1;

    return page_js;

    })));
    });

    /* src\components\Header.svelte generated by Svelte v3.43.1 */

    const file$9 = "src\\components\\Header.svelte";

    function create_fragment$9(ctx) {
    	let div17;
    	let div0;
    	let t0;
    	let div15;
    	let div14;
    	let div4;
    	let div3;
    	let div1;
    	let a0;
    	let img0;
    	let img0_src_value;
    	let t1;
    	let div2;
    	let a1;
    	let img1;
    	let img1_src_value;
    	let t2;
    	let div7;
    	let div6;
    	let div5;
    	let t3;
    	let t4;
    	let div13;
    	let div8;
    	let a2;
    	let t5;
    	let t6;
    	let div9;
    	let a3;
    	let t7;
    	let t8;
    	let div10;
    	let a4;
    	let t9;
    	let t10;
    	let div11;
    	let a5;
    	let t11;
    	let t12;
    	let div12;
    	let a6;
    	let t13;
    	let t14;
    	let div16;

    	const block = {
    		c: function create() {
    			div17 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div15 = element("div");
    			div14 = element("div");
    			div4 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			a0 = element("a");
    			img0 = element("img");
    			t1 = space();
    			div2 = element("div");
    			a1 = element("a");
    			img1 = element("img");
    			t2 = space();
    			div7 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			t3 = text(/*title*/ ctx[0]);
    			t4 = space();
    			div13 = element("div");
    			div8 = element("div");
    			a2 = element("a");
    			t5 = text("Home");
    			t6 = space();
    			div9 = element("div");
    			a3 = element("a");
    			t7 = text("Biography");
    			t8 = space();
    			div10 = element("div");
    			a4 = element("a");
    			t9 = text("Music");
    			t10 = space();
    			div11 = element("div");
    			a5 = element("a");
    			t11 = text("Gallery");
    			t12 = space();
    			div12 = element("div");
    			a6 = element("a");
    			t13 = text("Contact");
    			t14 = space();
    			div16 = element("div");
    			attr_dev(div0, "class", "col-md-1");
    			add_location(div0, file$9, 6, 4, 244);
    			attr_dev(img0, "alt", "Spotify icon");
    			if (!src_url_equal(img0.src, img0_src_value = "" + (/*base*/ ctx[1] + "/spotifyAsset 1.svg"))) attr_dev(img0, "src", img0_src_value);
    			set_style(img0, "height", "35px");
    			add_location(img0, file$9, 13, 28, 783);
    			attr_dev(a0, "href", "https://open.spotify.com/artist/6W8a9qf3p13KUAR5pDLpEM?si=39d9f0065a254e3b");
    			add_location(a0, file$9, 12, 24, 668);
    			attr_dev(div1, "class", "col-md-auto align-self-end");
    			add_location(div1, file$9, 11, 20, 566);
    			attr_dev(img1, "alt", "Facebook icon");
    			if (!src_url_equal(img1.src, img1_src_value = "" + (/*base*/ ctx[1] + "/facebookAsset 2.svg"))) attr_dev(img1, "src", img1_src_value);
    			set_style(img1, "height", "35px");
    			add_location(img1, file$9, 18, 28, 1103);
    			attr_dev(a1, "href", "https://www.facebook.com/profile.php?id=100003203298990");
    			add_location(a1, file$9, 17, 24, 1007);
    			attr_dev(div2, "class", "col-md-auto align-self-end");
    			add_location(div2, file$9, 16, 20, 941);
    			attr_dev(div3, "class", "row mb-2 d-flex text-start justify-content-start");
    			set_style(div3, "width", "160px");
    			add_location(div3, file$9, 10, 16, 460);
    			attr_dev(div4, "class", "col-md-4 align-self-end");
    			add_location(div4, file$9, 9, 12, 405);
    			attr_dev(div5, "class", "col-md-auto");
    			set_style(div5, "color", "#D3A786");
    			set_style(div5, "font-family", "'PT Sans', sans-serif");
    			set_style(div5, "font-size", "4em");
    			set_style(div5, "font-weight", "500");
    			add_location(div5, file$9, 26, 20, 1420);
    			attr_dev(div6, "class", "row justify-content-center");
    			add_location(div6, file$9, 25, 16, 1358);
    			attr_dev(div7, "class", "col-md-4 ");
    			add_location(div7, file$9, 24, 12, 1317);
    			set_style(a2, "display", "inline-block");
    			set_style(a2, "color", "#DEB79A");
    			set_style(a2, "text-decoration", "none");
    			set_style(a2, "font-size", "1.2em");
    			attr_dev(a2, "href", "" + (/*base*/ ctx[1] + "/"));
    			add_location(a2, file$9, 32, 43, 1779);
    			set_style(div8, "padding", "6px");
    			add_location(div8, file$9, 32, 16, 1752);
    			set_style(a3, "display", "inline-block");
    			set_style(a3, "color", "#DEB79A");
    			set_style(a3, "text-decoration", "none");
    			set_style(a3, "font-size", "1.2em");
    			attr_dev(a3, "href", "" + (/*base*/ ctx[1] + "/bio"));
    			add_location(a3, file$9, 33, 43, 1944);
    			set_style(div9, "padding", "6px");
    			add_location(div9, file$9, 33, 16, 1917);
    			set_style(a4, "display", "inline-block");
    			set_style(a4, "color", "#DEB79A");
    			set_style(a4, "text-decoration", "none");
    			set_style(a4, "font-size", "1.2em");
    			attr_dev(a4, "href", "" + (/*base*/ ctx[1] + "/music"));
    			add_location(a4, file$9, 34, 43, 2117);
    			set_style(div10, "padding", "6px");
    			add_location(div10, file$9, 34, 16, 2090);
    			set_style(a5, "display", "inline-block");
    			set_style(a5, "color", "#DEB79A");
    			set_style(a5, "text-decoration", "none");
    			set_style(a5, "font-size", "1.2em");
    			attr_dev(a5, "href", "" + (/*base*/ ctx[1] + "/gallery"));
    			add_location(a5, file$9, 35, 43, 2288);
    			set_style(div11, "padding", "6px");
    			add_location(div11, file$9, 35, 16, 2261);
    			set_style(a6, "display", "inline-block");
    			set_style(a6, "color", "#DEB79A");
    			set_style(a6, "text-decoration", "none");
    			set_style(a6, "font-size", "1.2em");
    			attr_dev(a6, "href", "" + (/*base*/ ctx[1] + "/contact"));
    			add_location(a6, file$9, 36, 43, 2463);
    			set_style(div12, "padding", "6px");
    			add_location(div12, file$9, 36, 16, 2436);
    			attr_dev(div13, "class", "col-md-4 d-flex flex-row justify-content-between align-self-end");
    			add_location(div13, file$9, 31, 12, 1657);
    			attr_dev(div14, "class", "row d-flex pb-2 h-100");
    			attr_dev(div14, "style", "");
    			add_location(div14, file$9, 8, 8, 347);
    			attr_dev(div15, "class", "col-md-10");
    			set_style(div15, "flex", "1 1 auto");
    			set_style(div15, "opacity", "1");
    			add_location(div15, file$9, 7, 4, 278);
    			attr_dev(div16, "class", "col-md-1");
    			add_location(div16, file$9, 40, 4, 2647);
    			attr_dev(div17, "class", "row d-flex");
    			set_style(div17, "z-index", "1");
    			set_style(div17, "height", "140px");
    			set_style(div17, "background-color", "rgba(0, 0, 0, 0.6)");
    			add_location(div17, file$9, 5, 0, 126);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div17, anchor);
    			append_dev(div17, div0);
    			append_dev(div17, t0);
    			append_dev(div17, div15);
    			append_dev(div15, div14);
    			append_dev(div14, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, a0);
    			append_dev(a0, img0);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			append_dev(div2, a1);
    			append_dev(a1, img1);
    			append_dev(div14, t2);
    			append_dev(div14, div7);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, t3);
    			append_dev(div14, t4);
    			append_dev(div14, div13);
    			append_dev(div13, div8);
    			append_dev(div8, a2);
    			append_dev(a2, t5);
    			append_dev(div13, t6);
    			append_dev(div13, div9);
    			append_dev(div9, a3);
    			append_dev(a3, t7);
    			append_dev(div13, t8);
    			append_dev(div13, div10);
    			append_dev(div10, a4);
    			append_dev(a4, t9);
    			append_dev(div13, t10);
    			append_dev(div13, div11);
    			append_dev(div11, a5);
    			append_dev(a5, t11);
    			append_dev(div13, t12);
    			append_dev(div13, div12);
    			append_dev(div12, a6);
    			append_dev(a6, t13);
    			append_dev(div17, t14);
    			append_dev(div17, div16);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 1) set_data_dev(t3, /*title*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div17);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, []);
    	let { title = '' } = $$props;

    	const base = '';

    	const writable_props = ['title'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    	};

    	$$self.$capture_state = () => ({ title, base });

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, base];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { title: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get title() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\PageFrame.svelte generated by Svelte v3.43.1 */

    const file$8 = "src\\components\\PageFrame.svelte";

    function create_fragment$8(ctx) {
    	let div5;
    	let div0;
    	let t0;
    	let div3;
    	let div2;
    	let div1;
    	let t1;
    	let div4;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[1].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			div4 = element("div");
    			attr_dev(div0, "class", "col-md-1 svelte-odm9u1");
    			add_location(div0, file$8, 1, 4, 132);
    			attr_dev(div1, "class", "col-md-12 d-flex flex-column svelte-odm9u1");
    			set_style(div1, "background-color", "rgba(116,255,116, 0.0)");
    			add_location(div1, file$8, 4, 3, 302);
    			attr_dev(div2, "class", "row svelte-odm9u1");
    			set_style(div2, "flex", "1 1 auto");
    			add_location(div2, file$8, 3, 8, 254);
    			attr_dev(div3, "class", "col-md-10 d-flex flex-column svelte-odm9u1");
    			set_style(div3, "padding-top", "60px");
    			add_location(div3, file$8, 2, 4, 166);
    			attr_dev(div4, "class", "col-md-1 svelte-odm9u1");
    			add_location(div4, file$8, 9, 4, 476);
    			attr_dev(div5, "class", "row scrollbar svelte-odm9u1");
    			set_style(div5, "flex", "1 1 auto");
    			set_style(div5, "background-color", "rgba(116,100,216, .0)");
    			set_style(div5, "overflow-y", "auto");
    			add_location(div5, file$8, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div0);
    			append_dev(div5, t0);
    			append_dev(div5, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			append_dev(div5, t1);
    			append_dev(div5, div4);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[0],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PageFrame', slots, ['default']);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PageFrame> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
    	};

    	return [$$scope, slots];
    }

    class PageFrame extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PageFrame",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src\components\Home.svelte generated by Svelte v3.43.1 */
    const file$7 = "src\\components\\Home.svelte";

    // (10:1) <PageFrame>
    function create_default_slot$5(ctx) {
    	let div2;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let t1;
    	let div4;
    	let div3;
    	let p0;
    	let t3;
    	let p1;
    	let i;
    	let t5;
    	let p2;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div4 = element("div");
    			div3 = element("div");
    			p0 = element("p");
    			p0.textContent = "Best New Music award winner 2013, Brass Band World";
    			t3 = space();
    			p1 = element("p");
    			i = element("i");
    			i.textContent = "“...a composer in possession of a mind bursting with ideas... Goldberg 2012 also showed a rare depth of musicality. “";
    			t5 = space();
    			p2 = element("p");
    			p2.textContent = "Philip Harper";
    			attr_dev(img, "alt", "Signature as SVG");
    			if (!src_url_equal(img.src, img_src_value = "" + (/*base*/ ctx[0] + "/LOGO.FINAL.svg"))) attr_dev(img, "src", img_src_value);
    			set_style(img, "width", "70%");
    			add_location(img, file$7, 12, 4, 624);
    			attr_dev(div0, "class", "col-md-6 align-self-center text-start");
    			set_style(div0, "background-color", "rgba(216,191,216, 0.0)");
    			add_location(div0, file$7, 11, 3, 518);
    			attr_dev(div1, "class", "col-md-6");
    			add_location(div1, file$7, 14, 3, 713);
    			attr_dev(div2, "class", "row");
    			set_style(div2, "flex", "1 1 auto");
    			set_style(div2, "background-color", "rgba(116,255,116, 0.0)");
    			add_location(div2, file$7, 10, 2, 431);
    			add_location(p0, file$7, 18, 4, 982);
    			add_location(i, file$7, 19, 7, 1047);
    			add_location(p1, file$7, 19, 4, 1044);
    			add_location(p2, file$7, 20, 4, 1180);
    			attr_dev(div3, "class", "col-md-12 align-self-center text-end");
    			set_style(div3, "background-color", "rgba(116,200,216, 0.0)");
    			set_style(div3, "color", "#DEB79A");
    			set_style(div3, "font-size", "2.5em");
    			add_location(div3, file$7, 17, 3, 843);
    			attr_dev(div4, "class", "row");
    			set_style(div4, "flex", "1 1 auto");
    			set_style(div4, "background-color", "rgba(116,100,216, 0)");
    			add_location(div4, file$7, 16, 2, 759);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, img);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, p0);
    			append_dev(div3, t3);
    			append_dev(div3, p1);
    			append_dev(p1, i);
    			append_dev(div3, t5);
    			append_dev(div3, p2);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(10:1) <PageFrame>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let main;
    	let header;
    	let t;
    	let pageframe;
    	let current;
    	header = new Header({ $$inline: true });

    	pageframe = new PageFrame({
    			props: {
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(header.$$.fragment);
    			t = space();
    			create_component(pageframe.$$.fragment);
    			attr_dev(main, "class", "container-fluid h-100 d-flex flex-column");
    			set_style(main, "background-image", "url('" + (/*base*/ ctx[0] + '/') + "Hero.png')");
    			set_style(main, "background-size", "cover");
    			set_style(main, "background-position", "center center");
    			set_style(main, "background-repeat", "no-repeat");
    			set_style(main, "overflow", "hidden");
    			add_location(main, file$7, 6, 0, 177);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(header, main, null);
    			append_dev(main, t);
    			mount_component(pageframe, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const pageframe_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				pageframe_changes.$$scope = { dirty, ctx };
    			}

    			pageframe.$set(pageframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(pageframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(pageframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(header);
    			destroy_component(pageframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);

    	const base = '';

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Header, PageFrame, base });
    	return [base];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* src\components\Footer.svelte generated by Svelte v3.43.1 */

    const file$6 = "src\\components\\Footer.svelte";

    function create_fragment$6(ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			attr_dev(img, "alt", "Signature as SVG");
    			if (!src_url_equal(img.src, img_src_value = "" + (/*base*/ ctx[0] + "/LOGO.FINAL.svg"))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "mx-auto d-block mb-4");
    			set_style(img, "width", "30%");
    			add_location(img, file$6, 5, 8, 229);
    			attr_dev(div0, "class", "col-md-12 align-self-end");
    			add_location(div0, file$6, 4, 4, 181);
    			attr_dev(div1, "class", "row d-flex h-100 justify-content-center");
    			set_style(div1, "padding-top", "40px");
    			add_location(div1, file$6, 3, 0, 95);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);

    	const base = '';

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ base });
    	return [base];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src\components\Bio.svelte generated by Svelte v3.43.1 */
    const file$5 = "src\\components\\Bio.svelte";

    // (10:1) <PageFrame>
    function create_default_slot$4(ctx) {
    	let div9;
    	let div5;
    	let div1;
    	let div0;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let div4;
    	let div3;
    	let div2;
    	let iframe;
    	let iframe_src_value;
    	let t1;
    	let div8;
    	let div7;
    	let p0;
    	let t3;
    	let p1;
    	let t5;
    	let p2;
    	let t7;
    	let div6;
    	let figure;
    	let img1;
    	let img1_src_value;
    	let t8;
    	let figcaption;
    	let t10;
    	let p3;
    	let t12;
    	let footer;
    	let current;
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div9 = element("div");
    			div5 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			img0 = element("img");
    			t0 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			iframe = element("iframe");
    			t1 = space();
    			div8 = element("div");
    			div7 = element("div");
    			p0 = element("p");
    			p0.textContent = "Svein H. Giske was born in Ålesund on the northwestern coast of Norway in 1973.                 \r\n                From 1993 he's been located in Bergen, where he studied trumpet at the Grieg Academy.                \r\n                In 1996 he landed a position as a trumpeter in The Norwegian Naval Forces' Band in Bergen where he still works. He is a frequent soloist with the band both in live performances and on recordings.                 \r\n                Giske is versatile both as a trumpet player and as a composer/arranger. \r\n                From 1997 to date he's been a permanent member of the Bergen Big Band. He has also on many occasions played with contemporary ensemble Bit 20 and the Bergen Philharmonic Orchestra.                  \r\n                Giske has also worked several years at Den Nationale Scene, the theatre in Bergen, and on musicals and shows as a freelancer.";
    			t3 = space();
    			p1 = element("p");
    			p1.textContent = "Giske studied composition with Morten E. Pedersen at the Grieg Academy.\r\n                He has written and arranged a lot of music, mainly for winds and percussion, but also for choir, big band and various chamber music constellations. \r\n                His music is often rhythmically driven, with influences from jazz and pop as well as classical and contemporary music. Although pulse and rhythm is important to Giske, he also has a strong lyrical and expressive vein running through his music.\r\n                He has written for contemporary ensemble Bit 20, and has had commissions from \r\n                The Norwegian Band Federation with trumpet virtuoso Ole Edvard Antonsen, \r\n                The Arctic Philharmonic with trombone virtuoso Ian Bousfield, \r\n                The Norwegian Naval Forces' Band, Eikanger-Bjørsvik Musikklag, Stavanger Brass Band, Bergen Woodwind Ensemble (B3),The Bergen Big Band and several others. \r\n                \r\n                He wrote Goldberg 2012 as a test piece for the Norwegian Band Federation. \r\n                After the premiere the same year, this piece won 2 awards; \r\n                Test Piece of the Year (4barsrest.com) and Best New Music (Brass Band World). \r\n                The wind band version was also nominated for the Norwegian Music Publishers' Award in 2020.";
    			t5 = space();
    			p2 = element("p");
    			p2.textContent = "Giske has been working as a conductor from the early 2000s, mainly with brass bands and wind bands in the Bergen area. \r\n                He has long tenures with Dragefjellets Musikkorps and Askøy Brass Band and is musical director for both bands. \r\n                With Askøy, he's had 3 wins in the Siddis Brass Contest; in 2009, 2012 and 2019. \r\n                All programmes featured Giske's own arrangements.";
    			t7 = space();
    			div6 = element("div");
    			figure = element("figure");
    			img1 = element("img");
    			t8 = space();
    			figcaption = element("figcaption");
    			figcaption.textContent = "Dragefjellets musikkorps. Photo Ingvild Festervoll Melien";
    			t10 = space();
    			p3 = element("p");
    			p3.textContent = "Giske has about 20 years experience of adjudicating bands, soloists and ensembles. He works both locally, regionally and in national contests.";
    			t12 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(img0, "alt", "Portrait of Sven H. Giske");
    			if (!src_url_equal(img0.src, img0_src_value = "" + (/*base*/ ctx[0] + "/portrett1.png"))) attr_dev(img0, "src", img0_src_value);
    			set_style(img0, "width", "100%");
    			add_location(img0, file$5, 14, 24, 730);
    			attr_dev(div0, "class", "col-md-auto");
    			add_location(div0, file$5, 13, 20, 679);
    			attr_dev(div1, "class", "row d-flex flex-colum align-self-center");
    			set_style(div1, "background-color", "rgb(200,10,100, 0.0)");
    			add_location(div1, file$5, 12, 16, 556);
    			attr_dev(iframe, "class", "video svelte-1aepn9n");
    			if (!src_url_equal(iframe.src, iframe_src_value = "https://www.youtube.com/embed/N2nmftt5x7o")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "title", "YouTube video player");
    			attr_dev(iframe, "frameborder", "0");
    			attr_dev(iframe, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
    			iframe.allowFullscreen = true;
    			add_location(iframe, file$5, 20, 28, 1204);
    			attr_dev(div2, "class", "video-container svelte-1aepn9n");
    			add_location(div2, file$5, 19, 24, 1145);
    			attr_dev(div3, "class", "col-md-12");
    			set_style(div3, "padding", "0");
    			add_location(div3, file$5, 18, 20, 1052);
    			attr_dev(div4, "class", "row d-flex flex-colum align-self-center");
    			set_style(div4, "width", "100%");
    			set_style(div4, "margin", "10px");
    			set_style(div4, "background-color", "rgb(200,10,100, 0.0)");
    			set_style(div4, "flex", "1 1 auto");
    			add_location(div4, file$5, 17, 16, 886);
    			attr_dev(div5, "class", "col-md-4 d-flex flex-column ");
    			add_location(div5, file$5, 11, 12, 496);
    			add_location(p0, file$5, 27, 16, 1739);
    			add_location(p1, file$5, 35, 16, 2695);
    			add_location(p2, file$5, 50, 16, 4089);
    			attr_dev(img1, "alt", "Svein H. Giske conducting a concert at Grieghallen, Bergen");
    			attr_dev(img1, "class", "w-100");
    			if (!src_url_equal(img1.src, img1_src_value = "" + (/*base*/ ctx[0] + "/dragen-ha1.jpg"))) attr_dev(img1, "src", img1_src_value);
    			add_location(img1, file$5, 58, 20, 4681);
    			attr_dev(figcaption, "class", "figure-caption svelte-1aepn9n");
    			add_location(figcaption, file$5, 59, 20, 4816);
    			attr_dev(figure, "class", "figure w-100");
    			add_location(figure, file$5, 57, 20, 4630);
    			attr_dev(div6, "class", "d-flex justify-content-center");
    			add_location(div6, file$5, 56, 16, 4565);
    			add_location(p3, file$5, 62, 16, 5010);
    			attr_dev(div7, "class", "container");
    			set_style(div7, "padding-left", "30px");
    			set_style(div7, "padding-right", "0");
    			add_location(div7, file$5, 26, 16, 1652);
    			attr_dev(div8, "class", "col-md-8 ");
    			set_style(div8, "TEXT-ALIGN", "JUSTIFY");
    			add_location(div8, file$5, 25, 12, 1583);
    			attr_dev(div9, "class", "row");
    			add_location(div9, file$5, 10, 8, 465);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div9, anchor);
    			append_dev(div9, div5);
    			append_dev(div5, div1);
    			append_dev(div1, div0);
    			append_dev(div0, img0);
    			append_dev(div5, t0);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, iframe);
    			append_dev(div9, t1);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, p0);
    			append_dev(div7, t3);
    			append_dev(div7, p1);
    			append_dev(div7, t5);
    			append_dev(div7, p2);
    			append_dev(div7, t7);
    			append_dev(div7, div6);
    			append_dev(div6, figure);
    			append_dev(figure, img1);
    			append_dev(figure, t8);
    			append_dev(figure, figcaption);
    			append_dev(div7, t10);
    			append_dev(div7, p3);
    			insert_dev(target, t12, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div9);
    			if (detaching) detach_dev(t12);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(10:1) <PageFrame>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let main;
    	let header;
    	let t;
    	let pageframe;
    	let current;

    	header = new Header({
    			props: { title: 'Biography' },
    			$$inline: true
    		});

    	pageframe = new PageFrame({
    			props: {
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(header.$$.fragment);
    			t = space();
    			create_component(pageframe.$$.fragment);
    			attr_dev(main, "class", "container-fluid d-flex flex-column h-100");
    			set_style(main, "background-image", "url('" + (/*base*/ ctx[0] + '/') + "AdobeStock_128726374.jpeg')");
    			set_style(main, "background-size", "cover");
    			set_style(main, "overflow", "hidden");
    			add_location(main, file$5, 7, 0, 227);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(header, main, null);
    			append_dev(main, t);
    			mount_component(pageframe, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const pageframe_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				pageframe_changes.$$scope = { dirty, ctx };
    			}

    			pageframe.$set(pageframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(pageframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(pageframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(header);
    			destroy_component(pageframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Bio', slots, []);

    	const base = '';

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Bio> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Header, PageFrame, Footer, base });
    	return [base];
    }

    class Bio extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Bio",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src\components\Music.svelte generated by Svelte v3.43.1 */
    const file$4 = "src\\components\\Music.svelte";

    // (10:1) <PageFrame>
    function create_default_slot$3(ctx) {
    	let div27;
    	let div21;
    	let div6;
    	let div1;
    	let div0;
    	let iframe0;
    	let iframe0_src_value;
    	let t0;
    	let p0;
    	let t1;
    	let br0;
    	let t2;
    	let t3;
    	let div2;
    	let t4;
    	let div4;
    	let div3;
    	let iframe1;
    	let iframe1_src_value;
    	let t5;
    	let p1;
    	let t6;
    	let br1;
    	let t7;
    	let t8;
    	let div5;
    	let t9;
    	let div13;
    	let div8;
    	let div7;
    	let iframe2;
    	let iframe2_src_value;
    	let t10;
    	let p2;
    	let t11;
    	let br2;
    	let t12;
    	let t13;
    	let div9;
    	let t14;
    	let div11;
    	let div10;
    	let iframe3;
    	let iframe3_src_value;
    	let t15;
    	let p3;
    	let t16;
    	let br3;
    	let t17;
    	let t18;
    	let div12;
    	let t19;
    	let div20;
    	let div15;
    	let div14;
    	let iframe4;
    	let iframe4_src_value;
    	let t20;
    	let p4;
    	let t21;
    	let br4;
    	let t22;
    	let t23;
    	let div16;
    	let t24;
    	let div18;
    	let div17;
    	let iframe5;
    	let iframe5_src_value;
    	let t25;
    	let p5;
    	let t26;
    	let br5;
    	let t27;
    	let t28;
    	let div19;
    	let t29;
    	let div26;
    	let div25;
    	let h3;
    	let t31;
    	let p6;
    	let span0;
    	let t33;
    	let t34;
    	let p7;
    	let span1;
    	let t36;
    	let t37;
    	let p8;
    	let span2;
    	let t39;
    	let t40;
    	let p9;
    	let span3;
    	let t42;
    	let t43;
    	let p10;
    	let span4;
    	let t45;
    	let t46;
    	let p11;
    	let span5;
    	let t48;
    	let t49;
    	let p12;
    	let span6;
    	let t51;
    	let t52;
    	let p13;
    	let span7;
    	let t54;
    	let t55;
    	let p14;
    	let span8;
    	let t57;
    	let t58;
    	let p15;
    	let span9;
    	let t60;
    	let t61;
    	let p16;
    	let span10;
    	let t63;
    	let t64;
    	let p17;
    	let span11;
    	let t66;
    	let t67;
    	let p18;
    	let span12;
    	let t69;
    	let t70;
    	let p19;
    	let span13;
    	let t72;
    	let t73;
    	let p20;
    	let span14;
    	let t75;
    	let t76;
    	let p21;
    	let span15;
    	let t78;
    	let t79;
    	let p22;
    	let span16;
    	let t81;
    	let t82;
    	let p23;
    	let span17;
    	let t84;
    	let t85;
    	let p24;
    	let span18;
    	let t87;
    	let t88;
    	let p25;
    	let span19;
    	let t90;
    	let t91;
    	let p26;
    	let span20;
    	let t93;
    	let t94;
    	let p27;
    	let span21;
    	let t96;
    	let t97;
    	let p28;
    	let span22;
    	let t99;
    	let t100;
    	let p29;
    	let span23;
    	let t102;
    	let t103;
    	let p30;
    	let span24;
    	let t105;
    	let t106;
    	let p31;
    	let span25;
    	let t108;
    	let t109;
    	let p32;
    	let span26;
    	let t111;
    	let t112;
    	let p33;
    	let span27;
    	let t114;
    	let t115;
    	let p34;
    	let span28;
    	let t117;
    	let t118;
    	let p35;
    	let span29;
    	let t120;
    	let t121;
    	let p36;
    	let span30;
    	let t123;
    	let t124;
    	let p37;
    	let span31;
    	let t126;
    	let t127;
    	let p38;
    	let span32;
    	let t129;
    	let t130;
    	let p39;
    	let span33;
    	let t132;
    	let t133;
    	let p40;
    	let span34;
    	let t135;
    	let t136;
    	let p41;
    	let span35;
    	let t138;
    	let t139;
    	let p42;
    	let span36;
    	let t141;
    	let t142;
    	let div24;
    	let div22;
    	let a;
    	let img;
    	let img_src_value;
    	let t143;
    	let div23;
    	let p43;
    	let t145;
    	let span37;
    	let t146;
    	let footer;
    	let current;
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div27 = element("div");
    			div21 = element("div");
    			div6 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			iframe0 = element("iframe");
    			t0 = space();
    			p0 = element("p");
    			t1 = text("With Arctic Philharmonic");
    			br0 = element("br");
    			t2 = text("\r\n\t\t\t\t\t\tForce of Nature, by Svein Henrik Giske");
    			t3 = space();
    			div2 = element("div");
    			t4 = space();
    			div4 = element("div");
    			div3 = element("div");
    			iframe1 = element("iframe");
    			t5 = space();
    			p1 = element("p");
    			t6 = text("With Bergen Treblåsensemble (B3)");
    			br1 = element("br");
    			t7 = text("\r\n\t\t\t\t\t\tMarsj etter Erling Kjøk, by Svein Henrik Giske");
    			t8 = space();
    			div5 = element("div");
    			t9 = space();
    			div13 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			iframe2 = element("iframe");
    			t10 = space();
    			p2 = element("p");
    			t11 = text("With Bergen Treblåsensemble (B3)");
    			br2 = element("br");
    			t12 = text("\r\n\t\t\t\t\t\tMitt hjerte alltid vanker, by Svein Henrik Giske");
    			t13 = space();
    			div9 = element("div");
    			t14 = space();
    			div11 = element("div");
    			div10 = element("div");
    			iframe3 = element("iframe");
    			t15 = space();
    			p3 = element("p");
    			t16 = text("With Bergen Treblåsensemble (B3)");
    			br3 = element("br");
    			t17 = text("\r\n\t\t\t\t\t\tAnother Ground, by Svein Henrik Giske");
    			t18 = space();
    			div12 = element("div");
    			t19 = space();
    			div20 = element("div");
    			div15 = element("div");
    			div14 = element("div");
    			iframe4 = element("iframe");
    			t20 = space();
    			p4 = element("p");
    			t21 = text("With Dragefjellets Musikkorps");
    			br4 = element("br");
    			t22 = text("\r\n\t\t\t\t\t\tGoldberg 2012, by Svein Henrik Giske");
    			t23 = space();
    			div16 = element("div");
    			t24 = space();
    			div18 = element("div");
    			div17 = element("div");
    			iframe5 = element("iframe");
    			t25 = space();
    			p5 = element("p");
    			t26 = text("With Sjøforsvarets Musikkorps (Royal Norwegain Naval Forces)");
    			br5 = element("br");
    			t27 = text("\r\n\t\t\t\t\t\tJubileumsmarsj, by Svein Henrik Giske");
    			t28 = space();
    			div19 = element("div");
    			t29 = space();
    			div26 = element("div");
    			div25 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Svein Henrik Giskes list of works since 1995:";
    			t31 = space();
    			p6 = element("p");
    			span0 = element("span");
    			span0.textContent = "1995";
    			t33 = text(" \tA footpath from a human perspective (brass band)");
    			t34 = space();
    			p7 = element("p");
    			span1 = element("span");
    			span1.textContent = "1997";
    			t36 = text("\tConcertino for brass band");
    			t37 = space();
    			p8 = element("p");
    			span2 = element("span");
    			span2.textContent = "1998";
    			t39 = text("\tIntroduction for brass band");
    			t40 = space();
    			p9 = element("p");
    			span3 = element("span");
    			span3.textContent = "1999";
    			t42 = text(" \tRukan Krukan (wind band)");
    			t43 = space();
    			p10 = element("p");
    			span4 = element("span");
    			span4.textContent = "2000";
    			t45 = text(" \tFollowing the waves (wind band)");
    			t46 = space();
    			p11 = element("p");
    			span5 = element("span");
    			span5.textContent = "2002";
    			t48 = text("\tFragmotion (wind band)");
    			t49 = space();
    			p12 = element("p");
    			span6 = element("span");
    			span6.textContent = "2003";
    			t51 = text(" \tNu rinner solen opp (brass band)");
    			t52 = space();
    			p13 = element("p");
    			span7 = element("span");
    			span7.textContent = "2005";
    			t54 = text("\tTil Siri (organ and saxophone)");
    			t55 = space();
    			p14 = element("p");
    			span8 = element("span");
    			span8.textContent = "2006";
    			t57 = text(" \tHerregud, ditt dyre navn og ære -fantasi- (big band)");
    			t58 = space();
    			p15 = element("p");
    			span9 = element("span");
    			span9.textContent = "2007";
    			t60 = text(" \tForsvinn! -fantasi- (brass band)");
    			t61 = space();
    			p16 = element("p");
    			span10 = element("span");
    			span10.textContent = "2007";
    			t63 = text("\tGjendines dance... and lullaby, -fantasi- (brass band)");
    			t64 = space();
    			p17 = element("p");
    			span11 = element("span");
    			span11.textContent = "2008";
    			t66 = text("\tDance augmented (brass band)");
    			t67 = space();
    			p18 = element("p");
    			span12 = element("span");
    			span12.textContent = "2008";
    			t69 = text("  \tThree gentle giants (brass band)");
    			t70 = space();
    			p19 = element("p");
    			span13 = element("span");
    			span13.textContent = "2009";
    			t72 = text("\tSolefald (wind band and trombone soloist)");
    			t73 = space();
    			p20 = element("p");
    			span14 = element("span");
    			span14.textContent = "2009";
    			t75 = text("\tPå tur med Nystemt'n, -fantasi- (wind band)");
    			t76 = space();
    			p21 = element("p");
    			span15 = element("span");
    			span15.textContent = "2010";
    			t78 = text(" \tNew lines (flute, bassoon, horn and piano)");
    			t79 = space();
    			p22 = element("p");
    			span16 = element("span");
    			span16.textContent = "2010";
    			t81 = text("\tFlyt (brass band and trompet soloist)");
    			t82 = space();
    			p23 = element("p");
    			span17 = element("span");
    			span17.textContent = "2010";
    			t84 = text("  \tH.M. Dronning Sonjas honnørmarsj (brass band and wind band)");
    			t85 = space();
    			p24 = element("p");
    			span18 = element("span");
    			span18.textContent = "2010";
    			t87 = text(" \tMitt hjerte alltid vanker, -fantasi- (woodwind ensemble)");
    			t88 = space();
    			p25 = element("p");
    			span19 = element("span");
    			span19.textContent = "2011";
    			t90 = text(" \tGoldberg 2012 (brass band)");
    			t91 = space();
    			p26 = element("p");
    			span20 = element("span");
    			span20.textContent = "2011";
    			t93 = text("\tThe Maple Hawk o-phone (soprano saxophone and vibraphone)");
    			t94 = space();
    			p27 = element("p");
    			span21 = element("span");
    			span21.textContent = "2012";
    			t96 = text(" \tSome winters day (sinfonietta)");
    			t97 = space();
    			p28 = element("p");
    			span22 = element("span");
    			span22.textContent = "2012";
    			t99 = text(" \tOppstigning! fanfare (wind band)");
    			t100 = space();
    			p29 = element("p");
    			span23 = element("span");
    			span23.textContent = "2012";
    			t102 = text("\tLiquid glass painting\t(wind band)");
    			t103 = space();
    			p30 = element("p");
    			span24 = element("span");
    			span24.textContent = "2013";
    			t105 = text(" \tRoses on the tomb of Dido, Queen of Carthage (string quintet)");
    			t106 = space();
    			p31 = element("p");
    			span25 = element("span");
    			span25.textContent = "2013";
    			t108 = text(" \tDark. Light. In between (wind band)");
    			t109 = space();
    			p32 = element("p");
    			span26 = element("span");
    			span26.textContent = "2013";
    			t111 = text("\tAnother ground part 1 (woodwind ensemble and saxophone quartet) With support from Komponistenes Vederlagsfond.");
    			t112 = space();
    			p33 = element("p");
    			span27 = element("span");
    			span27.textContent = "2013";
    			t114 = text(" \tJubileumsmarsj (wind band)");
    			t115 = space();
    			p34 = element("p");
    			span28 = element("span");
    			span28.textContent = "2014";
    			t117 = text("\tPater Noster (mixed choir)");
    			t118 = space();
    			p35 = element("p");
    			span29 = element("span");
    			span29.textContent = "2014";
    			t120 = text(" \tSigns of Spring (bassoon, trumpet, percussion, harp, piano, violin and double bass)");
    			t121 = space();
    			p36 = element("p");
    			span30 = element("span");
    			span30.textContent = "2014";
    			t123 = text("  \tSolos (wind band with soloists: flute, soprano saxophone, cor anglais, bassoon and  vibraphone)");
    			t124 = space();
    			p37 = element("p");
    			span31 = element("span");
    			span31.textContent = "2014";
    			t126 = text("\tAnother ground -complete version-(woodwind ensemble and saxophone quartet) With support from Komponistenes Vederlagsfond.");
    			t127 = space();
    			p38 = element("p");
    			span32 = element("span");
    			span32.textContent = "2015";
    			t129 = text(" \tSons of Zeus for 2 trombones og brass band. Dedicated to soloists Marius Hesby, Grethe Tonheim and conductor Ingar Bergby. With support from Det Norske Komponistfond.");
    			t130 = space();
    			p39 = element("p");
    			span33 = element("span");
    			span33.textContent = "2016";
    			t132 = text("\tForce of Nature. For trombone soloist Ian Bousfield and strings from Arctic Philharmonic for the 2016 Arctic Trombone Festival. With support from Det Norske Komponistfond.");
    			t133 = space();
    			p40 = element("p");
    			span34 = element("span");
    			span34.textContent = "2018";
    			t135 = text("\tMade in Bergen (wind band)");
    			t136 = space();
    			p41 = element("p");
    			span35 = element("span");
    			span35.textContent = "2018";
    			t138 = text("\tVox Clara (wind band med obosolist) With support from Morten E. Pedersens Minnefond");
    			t139 = space();
    			p42 = element("p");
    			span36 = element("span");
    			span36.textContent = "2021";
    			t141 = text(" \tNew piece for brass band");
    			t142 = space();
    			div24 = element("div");
    			div22 = element("div");
    			a = element("a");
    			img = element("img");
    			t143 = space();
    			div23 = element("div");
    			p43 = element("p");
    			p43.textContent = "Visit noteservice to purchase music, or contact the composer";
    			t145 = space();
    			span37 = element("span");
    			t146 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(iframe0, "class", "video svelte-5h64tp");
    			if (!src_url_equal(iframe0.src, iframe0_src_value = "https://www.youtube.com/embed/IWmGbdepTWs")) attr_dev(iframe0, "src", iframe0_src_value);
    			attr_dev(iframe0, "title", "YouTube video player");
    			attr_dev(iframe0, "frameborder", "0");
    			attr_dev(iframe0, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
    			iframe0.allowFullscreen = true;
    			add_location(iframe0, file$4, 17, 28, 850);
    			attr_dev(div0, "class", "video-container svelte-5h64tp");
    			add_location(div0, file$4, 16, 24, 791);
    			add_location(br0, file$4, 19, 33, 1202);
    			attr_dev(p0, "class", "svelte-5h64tp");
    			add_location(p0, file$4, 19, 6, 1175);
    			attr_dev(div1, "class", "col-md-5 videocard videocard svelte-5h64tp");
    			add_location(div1, file$4, 15, 20, 723);
    			attr_dev(div2, "class", "col-md-1");
    			add_location(div2, file$4, 22, 5, 1291);
    			attr_dev(iframe1, "class", "video svelte-5h64tp");
    			if (!src_url_equal(iframe1.src, iframe1_src_value = "https://www.youtube.com/embed/gd-IQOw7mk4")) attr_dev(iframe1, "src", iframe1_src_value);
    			attr_dev(iframe1, "title", "YouTube video player");
    			attr_dev(iframe1, "frameborder", "0");
    			attr_dev(iframe1, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
    			iframe1.allowFullscreen = true;
    			add_location(iframe1, file$4, 25, 28, 1482);
    			attr_dev(div3, "class", "video-container svelte-5h64tp");
    			add_location(div3, file$4, 24, 24, 1423);
    			add_location(br1, file$4, 27, 41, 1818);
    			attr_dev(p1, "class", "svelte-5h64tp");
    			add_location(p1, file$4, 27, 6, 1783);
    			attr_dev(div4, "class", "col-md-5 videocard svelte-5h64tp");
    			add_location(div4, file$4, 23, 20, 1341);
    			attr_dev(div5, "class", "col-md-1");
    			add_location(div5, file$4, 30, 5, 1915);
    			attr_dev(div6, "class", "row align-self-center");
    			set_style(div6, "background-color", "rgb(200,10,100, 0.0)");
    			set_style(div6, "flex", "1 1 auto");
    			add_location(div6, file$4, 14, 4, 602);
    			attr_dev(iframe2, "class", "video svelte-5h64tp");
    			if (!src_url_equal(iframe2.src, iframe2_src_value = "https://www.youtube.com/embed/lxY71FHakIk")) attr_dev(iframe2, "src", iframe2_src_value);
    			attr_dev(iframe2, "title", "YouTube video player");
    			attr_dev(iframe2, "frameborder", "0");
    			attr_dev(iframe2, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
    			iframe2.allowFullscreen = true;
    			add_location(iframe2, file$4, 35, 28, 2211);
    			attr_dev(div7, "class", "video-container svelte-5h64tp");
    			add_location(div7, file$4, 34, 24, 2152);
    			add_location(br2, file$4, 37, 41, 2571);
    			attr_dev(p2, "class", "svelte-5h64tp");
    			add_location(p2, file$4, 37, 6, 2536);
    			attr_dev(div8, "class", "col-md-5 videocard svelte-5h64tp");
    			add_location(div8, file$4, 33, 20, 2094);
    			attr_dev(div9, "class", "col-md-1");
    			add_location(div9, file$4, 40, 5, 2670);
    			attr_dev(iframe3, "class", "video svelte-5h64tp");
    			if (!src_url_equal(iframe3.src, iframe3_src_value = "https://www.youtube.com/embed/cO2DGQDz4Sg")) attr_dev(iframe3, "src", iframe3_src_value);
    			attr_dev(iframe3, "title", "YouTube video player");
    			attr_dev(iframe3, "frameborder", "0");
    			attr_dev(iframe3, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
    			iframe3.allowFullscreen = true;
    			add_location(iframe3, file$4, 43, 28, 2861);
    			attr_dev(div10, "class", "video-container svelte-5h64tp");
    			add_location(div10, file$4, 42, 24, 2802);
    			add_location(br3, file$4, 45, 41, 3197);
    			attr_dev(p3, "class", "svelte-5h64tp");
    			add_location(p3, file$4, 45, 6, 3162);
    			attr_dev(div11, "class", "col-md-5 videocard svelte-5h64tp");
    			add_location(div11, file$4, 41, 20, 2720);
    			attr_dev(div12, "class", "col-md-1");
    			add_location(div12, file$4, 48, 5, 3285);
    			attr_dev(div13, "class", "row align-self-center");
    			set_style(div13, "background-color", "rgb(200,10,100, 0.0)");
    			set_style(div13, "flex", "1 1 auto");
    			add_location(div13, file$4, 32, 4, 1973);
    			attr_dev(iframe4, "class", "video svelte-5h64tp");
    			if (!src_url_equal(iframe4.src, iframe4_src_value = "https://www.youtube.com/embed/N2nmftt5x7o")) attr_dev(iframe4, "src", iframe4_src_value);
    			attr_dev(iframe4, "title", "YouTube video player");
    			attr_dev(iframe4, "frameborder", "0");
    			attr_dev(iframe4, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
    			iframe4.allowFullscreen = true;
    			add_location(iframe4, file$4, 53, 28, 3581);
    			attr_dev(div14, "class", "video-container svelte-5h64tp");
    			add_location(div14, file$4, 52, 24, 3522);
    			add_location(br4, file$4, 55, 38, 3938);
    			attr_dev(p4, "class", "svelte-5h64tp");
    			add_location(p4, file$4, 55, 6, 3906);
    			attr_dev(div15, "class", "col-md-5 videocard svelte-5h64tp");
    			add_location(div15, file$4, 51, 20, 3464);
    			attr_dev(div16, "class", "col-md-1");
    			add_location(div16, file$4, 58, 5, 4025);
    			attr_dev(iframe5, "class", "video svelte-5h64tp");
    			if (!src_url_equal(iframe5.src, iframe5_src_value = "https://www.youtube.com/embed/-fAOqPfzjFY")) attr_dev(iframe5, "src", iframe5_src_value);
    			attr_dev(iframe5, "title", "YouTube video player");
    			attr_dev(iframe5, "frameborder", "0");
    			attr_dev(iframe5, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
    			iframe5.allowFullscreen = true;
    			add_location(iframe5, file$4, 61, 28, 4216);
    			attr_dev(div17, "class", "video-container svelte-5h64tp");
    			add_location(div17, file$4, 60, 24, 4157);
    			add_location(br5, file$4, 63, 69, 4580);
    			attr_dev(p5, "class", "svelte-5h64tp");
    			add_location(p5, file$4, 63, 6, 4517);
    			attr_dev(div18, "class", "col-md-5 videocard svelte-5h64tp");
    			add_location(div18, file$4, 59, 20, 4075);
    			attr_dev(div19, "class", "col-md-1");
    			add_location(div19, file$4, 66, 5, 4668);
    			attr_dev(div20, "class", "row align-self-center");
    			set_style(div20, "background-color", "rgb(200,10,100, 0.0)");
    			set_style(div20, "flex", "1 1 auto");
    			add_location(div20, file$4, 50, 4, 3343);
    			attr_dev(div21, "class", "col-md-6");
    			add_location(div21, file$4, 13, 3, 554);
    			attr_dev(h3, "class", "svelte-5h64tp");
    			add_location(h3, file$4, 72, 5, 4939);
    			set_style(span0, "margin-right", "20px");
    			add_location(span0, file$4, 73, 8, 5003);
    			attr_dev(p6, "class", "svelte-5h64tp");
    			add_location(p6, file$4, 73, 5, 5000);
    			set_style(span1, "margin-right", "20px");
    			add_location(span1, file$4, 74, 8, 5112);
    			attr_dev(p7, "class", "svelte-5h64tp");
    			add_location(p7, file$4, 74, 5, 5109);
    			set_style(span2, "margin-right", "20px");
    			add_location(span2, file$4, 75, 8, 5197);
    			attr_dev(p8, "class", "svelte-5h64tp");
    			add_location(p8, file$4, 75, 5, 5194);
    			set_style(span3, "margin-right", "20px");
    			add_location(span3, file$4, 76, 8, 5285);
    			attr_dev(p9, "class", "svelte-5h64tp");
    			add_location(p9, file$4, 76, 5, 5282);
    			set_style(span4, "margin-right", "20px");
    			add_location(span4, file$4, 77, 8, 5370);
    			attr_dev(p10, "class", "svelte-5h64tp");
    			add_location(p10, file$4, 77, 5, 5367);
    			set_style(span5, "margin-right", "20px");
    			add_location(span5, file$4, 78, 8, 5462);
    			attr_dev(p11, "class", "svelte-5h64tp");
    			add_location(p11, file$4, 78, 5, 5459);
    			set_style(span6, "margin-right", "20px");
    			add_location(span6, file$4, 79, 8, 5544);
    			attr_dev(p12, "class", "svelte-5h64tp");
    			add_location(p12, file$4, 79, 5, 5541);
    			set_style(span7, "margin-right", "20px");
    			add_location(span7, file$4, 80, 8, 5637);
    			attr_dev(p13, "class", "svelte-5h64tp");
    			add_location(p13, file$4, 80, 5, 5634);
    			set_style(span8, "margin-right", "20px");
    			add_location(span8, file$4, 81, 8, 5727);
    			attr_dev(p14, "class", "svelte-5h64tp");
    			add_location(p14, file$4, 81, 5, 5724);
    			set_style(span9, "margin-right", "20px");
    			add_location(span9, file$4, 82, 8, 5840);
    			attr_dev(p15, "class", "svelte-5h64tp");
    			add_location(p15, file$4, 82, 5, 5837);
    			set_style(span10, "margin-right", "20px");
    			add_location(span10, file$4, 83, 8, 5933);
    			attr_dev(p16, "class", "svelte-5h64tp");
    			add_location(p16, file$4, 83, 5, 5930);
    			set_style(span11, "margin-right", "20px");
    			add_location(span11, file$4, 84, 8, 6047);
    			attr_dev(p17, "class", "svelte-5h64tp");
    			add_location(p17, file$4, 84, 5, 6044);
    			set_style(span12, "margin-right", "20px");
    			add_location(span12, file$4, 85, 8, 6135);
    			attr_dev(p18, "class", "svelte-5h64tp");
    			add_location(p18, file$4, 85, 5, 6132);
    			set_style(span13, "margin-right", "20px");
    			add_location(span13, file$4, 86, 8, 6229);
    			attr_dev(p19, "class", "svelte-5h64tp");
    			add_location(p19, file$4, 86, 5, 6226);
    			set_style(span14, "margin-right", "20px");
    			add_location(span14, file$4, 87, 8, 6330);
    			attr_dev(p20, "class", "svelte-5h64tp");
    			add_location(p20, file$4, 87, 5, 6327);
    			set_style(span15, "margin-right", "20px");
    			add_location(span15, file$4, 88, 8, 6433);
    			attr_dev(p21, "class", "svelte-5h64tp");
    			add_location(p21, file$4, 88, 5, 6430);
    			set_style(span16, "margin-right", "20px");
    			add_location(span16, file$4, 89, 8, 6536);
    			attr_dev(p22, "class", "svelte-5h64tp");
    			add_location(p22, file$4, 89, 5, 6533);
    			set_style(span17, "margin-right", "20px");
    			add_location(span17, file$4, 90, 8, 6633);
    			attr_dev(p23, "class", "svelte-5h64tp");
    			add_location(p23, file$4, 90, 5, 6630);
    			set_style(span18, "margin-right", "20px");
    			add_location(span18, file$4, 91, 8, 6754);
    			attr_dev(p24, "class", "svelte-5h64tp");
    			add_location(p24, file$4, 91, 5, 6751);
    			set_style(span19, "margin-right", "20px");
    			add_location(span19, file$4, 92, 8, 6871);
    			attr_dev(p25, "class", "svelte-5h64tp");
    			add_location(p25, file$4, 92, 5, 6868);
    			set_style(span20, "margin-right", "20px");
    			add_location(span20, file$4, 93, 8, 6958);
    			attr_dev(p26, "class", "svelte-5h64tp");
    			add_location(p26, file$4, 93, 5, 6955);
    			set_style(span21, "margin-right", "20px");
    			add_location(span21, file$4, 94, 8, 7075);
    			attr_dev(p27, "class", "svelte-5h64tp");
    			add_location(p27, file$4, 94, 5, 7072);
    			set_style(span22, "margin-right", "20px");
    			add_location(span22, file$4, 95, 8, 7166);
    			attr_dev(p28, "class", "svelte-5h64tp");
    			add_location(p28, file$4, 95, 5, 7163);
    			set_style(span23, "margin-right", "20px");
    			add_location(span23, file$4, 96, 8, 7259);
    			attr_dev(p29, "class", "svelte-5h64tp");
    			add_location(p29, file$4, 96, 5, 7256);
    			set_style(span24, "margin-right", "20px");
    			add_location(span24, file$4, 97, 8, 7352);
    			attr_dev(p30, "class", "svelte-5h64tp");
    			add_location(p30, file$4, 97, 5, 7349);
    			set_style(span25, "margin-right", "20px");
    			add_location(span25, file$4, 98, 8, 7474);
    			attr_dev(p31, "class", "svelte-5h64tp");
    			add_location(p31, file$4, 98, 5, 7471);
    			set_style(span26, "margin-right", "20px");
    			add_location(span26, file$4, 99, 8, 7570);
    			attr_dev(p32, "class", "svelte-5h64tp");
    			add_location(p32, file$4, 99, 5, 7567);
    			set_style(span27, "margin-right", "20px");
    			add_location(span27, file$4, 100, 8, 7740);
    			attr_dev(p33, "class", "svelte-5h64tp");
    			add_location(p33, file$4, 100, 5, 7737);
    			set_style(span28, "margin-right", "20px");
    			add_location(span28, file$4, 101, 8, 7827);
    			attr_dev(p34, "class", "svelte-5h64tp");
    			add_location(p34, file$4, 101, 5, 7824);
    			set_style(span29, "margin-right", "20px");
    			add_location(span29, file$4, 102, 8, 7913);
    			attr_dev(p35, "class", "svelte-5h64tp");
    			add_location(p35, file$4, 102, 5, 7910);
    			set_style(span30, "margin-right", "20px");
    			add_location(span30, file$4, 103, 8, 8057);
    			attr_dev(p36, "class", "svelte-5h64tp");
    			add_location(p36, file$4, 103, 5, 8054);
    			set_style(span31, "margin-right", "20px");
    			add_location(span31, file$4, 104, 8, 8214);
    			attr_dev(p37, "class", "svelte-5h64tp");
    			add_location(p37, file$4, 104, 5, 8211);
    			set_style(span32, "margin-right", "20px");
    			add_location(span32, file$4, 105, 8, 8395);
    			attr_dev(p38, "class", "svelte-5h64tp");
    			add_location(p38, file$4, 105, 5, 8392);
    			set_style(span33, "margin-right", "20px");
    			add_location(span33, file$4, 106, 8, 8622);
    			attr_dev(p39, "class", "svelte-5h64tp");
    			add_location(p39, file$4, 106, 5, 8619);
    			set_style(span34, "margin-right", "20px");
    			add_location(span34, file$4, 107, 8, 8853);
    			attr_dev(p40, "class", "svelte-5h64tp");
    			add_location(p40, file$4, 107, 5, 8850);
    			set_style(span35, "margin-right", "20px");
    			add_location(span35, file$4, 108, 8, 8939);
    			attr_dev(p41, "class", "svelte-5h64tp");
    			add_location(p41, file$4, 108, 5, 8936);
    			set_style(span36, "margin-right", "20px");
    			add_location(span36, file$4, 109, 8, 9082);
    			attr_dev(p42, "class", "svelte-5h64tp");
    			add_location(p42, file$4, 109, 5, 9079);
    			attr_dev(img, "alt", "notebutikken.no logo");
    			if (!src_url_equal(img.src, img_src_value = "" + (/*base*/ ctx[0] + "/243568640_567675314284568_1604512146275012525_n.png"))) attr_dev(img, "src", img_src_value);
    			add_location(img, file$4, 112, 43, 9292);
    			attr_dev(a, "href", "https://notebutikken.no");
    			add_location(a, file$4, 112, 9, 9258);
    			attr_dev(div22, "class", "flex-shrink-0");
    			add_location(div22, file$4, 111, 7, 9220);
    			attr_dev(p43, "class", "svelte-5h64tp");
    			add_location(p43, file$4, 115, 8, 9457);
    			attr_dev(div23, "class", "flex-grow-1 ms-3");
    			add_location(div23, file$4, 114, 7, 9417);
    			attr_dev(div24, "class", "d-flex");
    			set_style(div24, "margin-top", "35px");
    			add_location(div24, file$4, 110, 5, 9165);
    			set_style(span37, "margin-right", "20px");
    			add_location(span37, file$4, 118, 8, 9567);
    			attr_dev(div25, "class", "container");
    			set_style(div25, "background-color", "rgba(0,0,0,0.5)");
    			set_style(div25, "padding", "20px");
    			set_style(div25, "border-radius", "2px");
    			add_location(div25, file$4, 71, 16, 4825);
    			attr_dev(div26, "class", "col-md-6 ");
    			set_style(div26, "TEXT-ALIGN", "JUSTIFY");
    			add_location(div26, file$4, 70, 12, 4756);
    			attr_dev(div27, "class", "row");
    			add_location(div27, file$4, 11, 8, 518);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div27, anchor);
    			append_dev(div27, div21);
    			append_dev(div21, div6);
    			append_dev(div6, div1);
    			append_dev(div1, div0);
    			append_dev(div0, iframe0);
    			append_dev(div1, t0);
    			append_dev(div1, p0);
    			append_dev(p0, t1);
    			append_dev(p0, br0);
    			append_dev(p0, t2);
    			append_dev(div6, t3);
    			append_dev(div6, div2);
    			append_dev(div6, t4);
    			append_dev(div6, div4);
    			append_dev(div4, div3);
    			append_dev(div3, iframe1);
    			append_dev(div4, t5);
    			append_dev(div4, p1);
    			append_dev(p1, t6);
    			append_dev(p1, br1);
    			append_dev(p1, t7);
    			append_dev(div6, t8);
    			append_dev(div6, div5);
    			append_dev(div21, t9);
    			append_dev(div21, div13);
    			append_dev(div13, div8);
    			append_dev(div8, div7);
    			append_dev(div7, iframe2);
    			append_dev(div8, t10);
    			append_dev(div8, p2);
    			append_dev(p2, t11);
    			append_dev(p2, br2);
    			append_dev(p2, t12);
    			append_dev(div13, t13);
    			append_dev(div13, div9);
    			append_dev(div13, t14);
    			append_dev(div13, div11);
    			append_dev(div11, div10);
    			append_dev(div10, iframe3);
    			append_dev(div11, t15);
    			append_dev(div11, p3);
    			append_dev(p3, t16);
    			append_dev(p3, br3);
    			append_dev(p3, t17);
    			append_dev(div13, t18);
    			append_dev(div13, div12);
    			append_dev(div21, t19);
    			append_dev(div21, div20);
    			append_dev(div20, div15);
    			append_dev(div15, div14);
    			append_dev(div14, iframe4);
    			append_dev(div15, t20);
    			append_dev(div15, p4);
    			append_dev(p4, t21);
    			append_dev(p4, br4);
    			append_dev(p4, t22);
    			append_dev(div20, t23);
    			append_dev(div20, div16);
    			append_dev(div20, t24);
    			append_dev(div20, div18);
    			append_dev(div18, div17);
    			append_dev(div17, iframe5);
    			append_dev(div18, t25);
    			append_dev(div18, p5);
    			append_dev(p5, t26);
    			append_dev(p5, br5);
    			append_dev(p5, t27);
    			append_dev(div20, t28);
    			append_dev(div20, div19);
    			append_dev(div27, t29);
    			append_dev(div27, div26);
    			append_dev(div26, div25);
    			append_dev(div25, h3);
    			append_dev(div25, t31);
    			append_dev(div25, p6);
    			append_dev(p6, span0);
    			append_dev(p6, t33);
    			append_dev(div25, t34);
    			append_dev(div25, p7);
    			append_dev(p7, span1);
    			append_dev(p7, t36);
    			append_dev(div25, t37);
    			append_dev(div25, p8);
    			append_dev(p8, span2);
    			append_dev(p8, t39);
    			append_dev(div25, t40);
    			append_dev(div25, p9);
    			append_dev(p9, span3);
    			append_dev(p9, t42);
    			append_dev(div25, t43);
    			append_dev(div25, p10);
    			append_dev(p10, span4);
    			append_dev(p10, t45);
    			append_dev(div25, t46);
    			append_dev(div25, p11);
    			append_dev(p11, span5);
    			append_dev(p11, t48);
    			append_dev(div25, t49);
    			append_dev(div25, p12);
    			append_dev(p12, span6);
    			append_dev(p12, t51);
    			append_dev(div25, t52);
    			append_dev(div25, p13);
    			append_dev(p13, span7);
    			append_dev(p13, t54);
    			append_dev(div25, t55);
    			append_dev(div25, p14);
    			append_dev(p14, span8);
    			append_dev(p14, t57);
    			append_dev(div25, t58);
    			append_dev(div25, p15);
    			append_dev(p15, span9);
    			append_dev(p15, t60);
    			append_dev(div25, t61);
    			append_dev(div25, p16);
    			append_dev(p16, span10);
    			append_dev(p16, t63);
    			append_dev(div25, t64);
    			append_dev(div25, p17);
    			append_dev(p17, span11);
    			append_dev(p17, t66);
    			append_dev(div25, t67);
    			append_dev(div25, p18);
    			append_dev(p18, span12);
    			append_dev(p18, t69);
    			append_dev(div25, t70);
    			append_dev(div25, p19);
    			append_dev(p19, span13);
    			append_dev(p19, t72);
    			append_dev(div25, t73);
    			append_dev(div25, p20);
    			append_dev(p20, span14);
    			append_dev(p20, t75);
    			append_dev(div25, t76);
    			append_dev(div25, p21);
    			append_dev(p21, span15);
    			append_dev(p21, t78);
    			append_dev(div25, t79);
    			append_dev(div25, p22);
    			append_dev(p22, span16);
    			append_dev(p22, t81);
    			append_dev(div25, t82);
    			append_dev(div25, p23);
    			append_dev(p23, span17);
    			append_dev(p23, t84);
    			append_dev(div25, t85);
    			append_dev(div25, p24);
    			append_dev(p24, span18);
    			append_dev(p24, t87);
    			append_dev(div25, t88);
    			append_dev(div25, p25);
    			append_dev(p25, span19);
    			append_dev(p25, t90);
    			append_dev(div25, t91);
    			append_dev(div25, p26);
    			append_dev(p26, span20);
    			append_dev(p26, t93);
    			append_dev(div25, t94);
    			append_dev(div25, p27);
    			append_dev(p27, span21);
    			append_dev(p27, t96);
    			append_dev(div25, t97);
    			append_dev(div25, p28);
    			append_dev(p28, span22);
    			append_dev(p28, t99);
    			append_dev(div25, t100);
    			append_dev(div25, p29);
    			append_dev(p29, span23);
    			append_dev(p29, t102);
    			append_dev(div25, t103);
    			append_dev(div25, p30);
    			append_dev(p30, span24);
    			append_dev(p30, t105);
    			append_dev(div25, t106);
    			append_dev(div25, p31);
    			append_dev(p31, span25);
    			append_dev(p31, t108);
    			append_dev(div25, t109);
    			append_dev(div25, p32);
    			append_dev(p32, span26);
    			append_dev(p32, t111);
    			append_dev(div25, t112);
    			append_dev(div25, p33);
    			append_dev(p33, span27);
    			append_dev(p33, t114);
    			append_dev(div25, t115);
    			append_dev(div25, p34);
    			append_dev(p34, span28);
    			append_dev(p34, t117);
    			append_dev(div25, t118);
    			append_dev(div25, p35);
    			append_dev(p35, span29);
    			append_dev(p35, t120);
    			append_dev(div25, t121);
    			append_dev(div25, p36);
    			append_dev(p36, span30);
    			append_dev(p36, t123);
    			append_dev(div25, t124);
    			append_dev(div25, p37);
    			append_dev(p37, span31);
    			append_dev(p37, t126);
    			append_dev(div25, t127);
    			append_dev(div25, p38);
    			append_dev(p38, span32);
    			append_dev(p38, t129);
    			append_dev(div25, t130);
    			append_dev(div25, p39);
    			append_dev(p39, span33);
    			append_dev(p39, t132);
    			append_dev(div25, t133);
    			append_dev(div25, p40);
    			append_dev(p40, span34);
    			append_dev(p40, t135);
    			append_dev(div25, t136);
    			append_dev(div25, p41);
    			append_dev(p41, span35);
    			append_dev(p41, t138);
    			append_dev(div25, t139);
    			append_dev(div25, p42);
    			append_dev(p42, span36);
    			append_dev(p42, t141);
    			append_dev(div25, t142);
    			append_dev(div25, div24);
    			append_dev(div24, div22);
    			append_dev(div22, a);
    			append_dev(a, img);
    			append_dev(div24, t143);
    			append_dev(div24, div23);
    			append_dev(div23, p43);
    			append_dev(div25, t145);
    			append_dev(div25, span37);
    			insert_dev(target, t146, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div27);
    			if (detaching) detach_dev(t146);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(10:1) <PageFrame>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let main;
    	let header;
    	let t;
    	let pageframe;
    	let current;

    	header = new Header({
    			props: { title: 'Music' },
    			$$inline: true
    		});

    	pageframe = new PageFrame({
    			props: {
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(header.$$.fragment);
    			t = space();
    			create_component(pageframe.$$.fragment);
    			attr_dev(main, "class", "container-fluid h-100 d-flex flex-column");
    			set_style(main, "background-image", "url('" + (/*base*/ ctx[0] + '/') + "AdobeStock_246360083.jpeg')");
    			set_style(main, "background-size", "cover");
    			set_style(main, "background-position", "center center");
    			set_style(main, "background-repeat", "no-repeat");
    			set_style(main, "overflow", "hidden");
    			add_location(main, file$4, 7, 0, 224);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(header, main, null);
    			append_dev(main, t);
    			mount_component(pageframe, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const pageframe_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				pageframe_changes.$$scope = { dirty, ctx };
    			}

    			pageframe.$set(pageframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(pageframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(pageframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(header);
    			destroy_component(pageframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Music', slots, []);

    	const base = '';

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Music> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Header, PageFrame, Footer, base });
    	return [base];
    }

    class Music extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Music",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src\components\Gallery.svelte generated by Svelte v3.43.1 */
    const file$3 = "src\\components\\Gallery.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	child_ctx[5] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	child_ctx[5] = i;
    	return child_ctx;
    }

    // (90:3) {#each buttons as _, i}
    function create_each_block_1(ctx) {
    	let button;

    	const block = {
    		c: function create() {
    			button = element("button");
    			attr_dev(button, "type", "button");
    			attr_dev(button, "data-bs-target", "#carouselExampleCaptions");
    			attr_dev(button, "data-bs-slide-to", /*i*/ ctx[5] + 1);
    			attr_dev(button, "aria-label", "Slide " + (/*i*/ ctx[5] + 2));
    			add_location(button, file$3, 90, 7, 2632);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(90:3) {#each buttons as _, i}",
    		ctx
    	});

    	return block;
    }

    // (100:4) {#if _.header}
    function create_if_block_1(ctx) {
    	let h5;
    	let t_value = /*_*/ ctx[3].header + "";
    	let t;

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			t = text(t_value);
    			add_location(h5, file$3, 99, 18, 3036);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			append_dev(h5, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(100:4) {#if _.header}",
    		ctx
    	});

    	return block;
    }

    // (101:4) {#if _.descr}
    function create_if_block(ctx) {
    	let p;
    	let t_value = /*_*/ ctx[3].descr + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			add_location(p, file$3, 100, 17, 3079);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(101:4) {#if _.descr}",
    		ctx
    	});

    	return block;
    }

    // (96:3) {#each images as _, i}
    function create_each_block(ctx) {
    	let div1;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let t1;
    	let t2;
    	let if_block0 = /*_*/ ctx[3].header && create_if_block_1(ctx);
    	let if_block1 = /*_*/ ctx[3].descr && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (!src_url_equal(img.src, img_src_value = "" + (/*base*/ ctx[0] + /*_*/ ctx[3].photo))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "...");
    			attr_dev(img, "class", "d-block svelte-ajao3w");
    			add_location(img, file$3, 97, 3, 2905);
    			attr_dev(div0, "class", "carousel-caption d-none d-md-block");
    			add_location(div0, file$3, 98, 3, 2963);
    			attr_dev(div1, "class", "carousel-item " + (/*_*/ ctx[3].active ? 'active' : ''));
    			add_location(div1, file$3, 96, 3, 2846);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (/*_*/ ctx[3].header) if_block0.p(ctx, dirty);
    			if (/*_*/ ctx[3].descr) if_block1.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(96:3) {#each images as _, i}",
    		ctx
    	});

    	return block;
    }

    // (79:1) <PageFrame>
    function create_default_slot$2(ctx) {
    	let div2;
    	let div0;
    	let ol;
    	let li0;
    	let t0;
    	let li1;
    	let t1;
    	let li2;
    	let t2;
    	let button0;
    	let t3;
    	let t4;
    	let div1;
    	let t5;
    	let button1;
    	let span0;
    	let t6;
    	let span1;
    	let t8;
    	let button2;
    	let span2;
    	let t9;
    	let span3;
    	let t11;
    	let footer;
    	let current;
    	let each_value_1 = /*buttons*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*images*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			ol = element("ol");
    			li0 = element("li");
    			t0 = space();
    			li1 = element("li");
    			t1 = space();
    			li2 = element("li");
    			t2 = space();
    			button0 = element("button");
    			t3 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t4 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t5 = space();
    			button1 = element("button");
    			span0 = element("span");
    			t6 = space();
    			span1 = element("span");
    			span1.textContent = "Previous";
    			t8 = space();
    			button2 = element("button");
    			span2 = element("span");
    			t9 = space();
    			span3 = element("span");
    			span3.textContent = "Next";
    			t11 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(li0, "data-target", "#carouselExampleIndicators");
    			attr_dev(li0, "data-slide-to", "0");
    			attr_dev(li0, "class", "active");
    			add_location(li0, file$3, 83, 4, 2197);
    			attr_dev(li1, "data-target", "#carouselExampleIndicators");
    			attr_dev(li1, "data-slide-to", "1");
    			add_location(li1, file$3, 84, 4, 2286);
    			attr_dev(li2, "data-target", "#carouselExampleIndicators");
    			attr_dev(li2, "data-slide-to", "2");
    			add_location(li2, file$3, 85, 4, 2360);
    			attr_dev(ol, "class", "carousel-indicators");
    			add_location(ol, file$3, 82, 3, 2159);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "data-bs-target", "#carouselExampleCaptions");
    			attr_dev(button0, "data-bs-slide-to", "0");
    			attr_dev(button0, "class", "active");
    			attr_dev(button0, "aria-current", "true");
    			attr_dev(button0, "aria-label", "Slide 1");
    			add_location(button0, file$3, 88, 3, 2445);
    			attr_dev(div0, "class", "carousel-indicators");
    			add_location(div0, file$3, 81, 2, 2121);
    			attr_dev(div1, "class", "carousel-inner");
    			add_location(div1, file$3, 94, 2, 2786);
    			attr_dev(span0, "class", "carousel-control-prev-icon");
    			attr_dev(span0, "aria-hidden", "true");
    			add_location(span0, file$3, 107, 3, 3278);
    			attr_dev(span1, "class", "visually-hidden");
    			add_location(span1, file$3, 108, 3, 3350);
    			attr_dev(button1, "class", "carousel-control-prev");
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "data-bs-target", "#carouselExampleCaptions");
    			attr_dev(button1, "data-bs-slide", "prev");
    			add_location(button1, file$3, 106, 2, 3158);
    			attr_dev(span2, "class", "carousel-control-next-icon");
    			attr_dev(span2, "aria-hidden", "true");
    			add_location(span2, file$3, 111, 3, 3532);
    			attr_dev(span3, "class", "visually-hidden");
    			add_location(span3, file$3, 112, 3, 3604);
    			attr_dev(button2, "class", "carousel-control-next");
    			attr_dev(button2, "type", "button");
    			attr_dev(button2, "data-bs-target", "#carouselExampleCaptions");
    			attr_dev(button2, "data-bs-slide", "next");
    			add_location(button2, file$3, 110, 2, 3412);
    			attr_dev(div2, "id", "carouselExampleCaptions");
    			attr_dev(div2, "class", "carousel slide");
    			attr_dev(div2, "data-bs-ride", "carousel");
    			add_location(div2, file$3, 80, 2, 2036);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, ol);
    			append_dev(ol, li0);
    			append_dev(ol, t0);
    			append_dev(ol, li1);
    			append_dev(ol, t1);
    			append_dev(ol, li2);
    			append_dev(div0, t2);
    			append_dev(div0, button0);
    			append_dev(div0, t3);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			append_dev(div2, t4);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div2, t5);
    			append_dev(div2, button1);
    			append_dev(button1, span0);
    			append_dev(button1, t6);
    			append_dev(button1, span1);
    			append_dev(div2, t8);
    			append_dev(div2, button2);
    			append_dev(button2, span2);
    			append_dev(button2, t9);
    			append_dev(button2, span3);
    			insert_dev(target, t11, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*images, base*/ 3) {
    				each_value = /*images*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t11);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(79:1) <PageFrame>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let main;
    	let header;
    	let t;
    	let pageframe;
    	let current;

    	header = new Header({
    			props: { title: 'Gallery' },
    			$$inline: true
    		});

    	pageframe = new PageFrame({
    			props: {
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(header.$$.fragment);
    			t = space();
    			create_component(pageframe.$$.fragment);
    			attr_dev(main, "class", "container-fluid h-100 d-flex flex-column");
    			set_style(main, "background-image", "url('" + (/*base*/ ctx[0] + '/') + "AdobeStock_173509560.jpeg')");
    			set_style(main, "background-size", "cover");
    			set_style(main, "background-position", "center center");
    			set_style(main, "background-repeat", "no-repeat");
    			set_style(main, "overflow", "hidden");
    			add_location(main, file$3, 76, 0, 1746);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(header, main, null);
    			append_dev(main, t);
    			mount_component(pageframe, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const pageframe_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				pageframe_changes.$$scope = { dirty, ctx };
    			}

    			pageframe.$set(pageframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(pageframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(pageframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(header);
    			destroy_component(pageframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Gallery', slots, []);

    	const base = '';

    	const images = [
    		{
    			active: true,
    			descr: 'Photo by Hege Haukefær',
    			photo: '/carousel/DSC_0388.png'
    		},
    		/* 	{
    		descr: 'Photo by Hege Haukefær',
    		photo: '/carousel/DSC_0398.png',
    	},
    	{
    		header: 'First slide label',
    		descr: 'Private photo',
    		photo: '/carousel/243027282_677109306588614_5187655386732845063_n.jpg',	
    	}, */
    		{
    			descr: 'Photo by Sissel Grønlund',
    			photo: '/carousel/243127189_161596956144376_1105875297059653370_n.jpg'
    		},
    		{
    			photo: '/carousel/243127925_4337010529680261_2252309596895278791_n.jpg'
    		},
    		{
    			photo: '/carousel/243161108_1186710121839618_5789436727830739854_n.jpg'
    		},
    		{
    			photo: '/carousel/243400726_591321095555552_3333375961966169838_n.jpg'
    		},
    		// {
    		// 	photo: '/carousel/243448945_394068972316024_6023593568879375735_n.jpg',
    		// },
    		{ photo: '/carousel/close up.png' },
    		// {
    		// 	photo: '/carousel/DSC_0390.png',
    		// },
    		{ photo: '/carousel/DSC_0416.png' },
    		{ photo: '/carousel/DSC_0424.png' },
    		// {
    		// 	photo: '/carousel/DSC_0451.png',
    		// },
    		{ photo: '/carousel/DSC_0465 copy.png' },
    		{ photo: '/carousel/fingers.trumpet.png' },
    		// {
    		// 	photo: '/carousel/ian.bousfield.png',
    		// },
    		{
    			photo: '/carousel/musikkforeleggerprisen.png'
    		},
    		{ photo: '/carousel/portrett1.png' },
    		{
    			photo: '/carousel/Skjermbilde 2015-11-05 kl. 11.06.45.png'
    		}
    	];

    	const buttons = [...images];
    	buttons.shift();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Gallery> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Header,
    		PageFrame,
    		Footer,
    		base,
    		images,
    		buttons
    	});

    	return [base, images, buttons];
    }

    class Gallery extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Gallery",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src\components\Contact.svelte generated by Svelte v3.43.1 */
    const file$2 = "src\\components\\Contact.svelte";

    // (10:1) <PageFrame>
    function create_default_slot$1(ctx) {
    	let div1;
    	let div0;
    	let h2;
    	let t1;
    	let a;
    	let t3;
    	let p;
    	let t5;
    	let footer;
    	let current;
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Svein Henrik Giske";
    			t1 = space();
    			a = element("a");
    			a.textContent = "sveinhgiske@gmail.com";
    			t3 = space();
    			p = element("p");
    			p.textContent = "Phone +47 900 34 094";
    			t5 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(h2, "class", "svelte-nx8cbo");
    			add_location(h2, file$2, 12, 5, 680);
    			attr_dev(a, "href", "mailto: sveinhgiske@gmail.com");
    			attr_dev(a, "class", "svelte-nx8cbo");
    			add_location(a, file$2, 13, 5, 714);
    			attr_dev(p, "class", "svelte-nx8cbo");
    			add_location(p, file$2, 14, 5, 786);
    			attr_dev(div0, "class", "col-md-3 align-self-center justify-content-center card text-center svelte-nx8cbo");
    			add_location(div0, file$2, 11, 4, 588);
    			attr_dev(div1, "class", "row h-100 justify-content-center");
    			set_style(div1, "flex", "1 1 auto");
    			add_location(div1, file$2, 10, 3, 512);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, h2);
    			append_dev(div0, t1);
    			append_dev(div0, a);
    			append_dev(div0, t3);
    			append_dev(div0, p);
    			insert_dev(target, t5, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t5);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(10:1) <PageFrame>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let main;
    	let header;
    	let t;
    	let pageframe;
    	let current;

    	header = new Header({
    			props: { title: 'Contact' },
    			$$inline: true
    		});

    	pageframe = new PageFrame({
    			props: {
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(header.$$.fragment);
    			t = space();
    			create_component(pageframe.$$.fragment);
    			attr_dev(main, "class", "container-fluid h-100 d-flex flex-column");
    			set_style(main, "background-image", "url('" + (/*base*/ ctx[0] + '/') + "AdobeStock_85241054.jpeg')");
    			set_style(main, "background-size", "cover");
    			set_style(main, "background-position", "center center");
    			set_style(main, "background-repeat", "no-repeat");
    			set_style(main, "overflow", "hidden");
    			add_location(main, file$2, 7, 0, 224);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(header, main, null);
    			append_dev(main, t);
    			mount_component(pageframe, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const pageframe_changes = {};

    			if (dirty & /*$$scope*/ 2) {
    				pageframe_changes.$$scope = { dirty, ctx };
    			}

    			pageframe.$set(pageframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(pageframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(pageframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(header);
    			destroy_component(pageframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Contact', slots, []);

    	const base = '';

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Contact> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Header, PageFrame, Footer, base });
    	return [base];
    }

    class Contact extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Contact",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\components\NotFound.svelte generated by Svelte v3.43.1 */
    const file$1 = "src\\components\\NotFound.svelte";

    // (8:1) <PageFrame>
    function create_default_slot(ctx) {
    	let div1;
    	let div0;
    	let h1;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			h1 = element("h1");
    			h1.textContent = "404 - Sorry page not found!";
    			set_style(h1, "color", "white");
    			add_location(h1, file$1, 10, 4, 541);
    			attr_dev(div0, "class", "col-md-12 align-self-center text-center");
    			set_style(div0, "background-color", "rgba(216,191,216, 0.0)");
    			add_location(div0, file$1, 9, 3, 431);
    			attr_dev(div1, "class", "row");
    			set_style(div1, "flex", "1 1 auto");
    			set_style(div1, "background-color", "rgba(116,255,116, 0.0)");
    			add_location(div1, file$1, 8, 2, 344);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, h1);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(8:1) <PageFrame>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let main;
    	let header;
    	let t;
    	let pageframe;
    	let current;
    	header = new Header({ $$inline: true });

    	pageframe = new PageFrame({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(header.$$.fragment);
    			t = space();
    			create_component(pageframe.$$.fragment);
    			attr_dev(main, "class", "container-fluid h-100 d-flex flex-column");
    			set_style(main, "background-image", "url('Hero.png')");
    			set_style(main, "background-size", "cover");
    			set_style(main, "background-position", "center center");
    			set_style(main, "background-repeat", "no-repeat");
    			set_style(main, "overflow", "hidden");
    			add_location(main, file$1, 5, 0, 104);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(header, main, null);
    			append_dev(main, t);
    			mount_component(pageframe, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const pageframe_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				pageframe_changes.$$scope = { dirty, ctx };
    			}

    			pageframe.$set(pageframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(pageframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(pageframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(header);
    			destroy_component(pageframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NotFound', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NotFound> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Header, PageFrame });
    	return [];
    }

    class NotFound extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotFound",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src\App.svelte generated by Svelte v3.43.1 */
    const file = "src\\App.svelte";

    function create_fragment(ctx) {
    	let base_1;
    	let t;
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*page*/ ctx[0];

    	function switch_props(ctx) {
    		return { $$inline: true };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	const block = {
    		c: function create() {
    			base_1 = element("base");
    			t = space();
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    			attr_dev(base_1, "href", /*base*/ ctx[1]);
    			add_location(base_1, file, 25, 5, 798);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, base_1);
    			insert_dev(target, t, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (switch_value !== (switch_value = /*page*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			detach_dev(base_1);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const name = 'Svein H. Giske';

    	const base = '';

    	let page$1 = null;
    	page('/', () => $$invalidate(0, page$1 = Home));
    	page('/bio', () => $$invalidate(0, page$1 = Bio));
    	page('/music', () => $$invalidate(0, page$1 = Music));
    	page('/gallery', () => $$invalidate(0, page$1 = Gallery));
    	page('/contact', () => $$invalidate(0, page$1 = Contact));
    	page('/*', () => $$invalidate(0, page$1 = NotFound));
    	page.start();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		name,
    		router: page,
    		Home,
    		Bio,
    		Music,
    		Gallery,
    		Contact,
    		NotFound,
    		base,
    		page: page$1
    	});

    	$$self.$inject_state = $$props => {
    		if ('page' in $$props) $$invalidate(0, page$1 = $$props.page);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [page$1, base, name];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { name: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get name() {
    		return this.$$.ctx[2];
    	}

    	set name(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const app = new App({
    	target: document.body,
    	props: {
    		name: 'world'
    	}
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
